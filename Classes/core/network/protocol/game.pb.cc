// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: game.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto3_proto {
class MatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Match> {
} _Match_default_instance_;
class C2S_CreateMatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<C2S_CreateMatch> {
} _C2S_CreateMatch_default_instance_;
class S2C_CreateMatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2C_CreateMatch> {
} _S2C_CreateMatch_default_instance_;
class C2S_JoinMatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<C2S_JoinMatch> {
} _C2S_JoinMatch_default_instance_;
class S2C_JoinMatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2C_JoinMatch> {
} _S2C_JoinMatch_default_instance_;
class S2C_MatchSnapshotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2C_MatchSnapshot> {
} _S2C_MatchSnapshot_default_instance_;

namespace protobuf_game_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, create_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, begin_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, total_round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, paigow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, players_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CreateMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CreateMatch, for_other_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CreateMatch, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CreateMatch, paigow_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_CreateMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_CreateMatch, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_CreateMatch, for_other_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_CreateMatch, match_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_JoinMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_JoinMatch, room_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_JoinMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_JoinMatch, user_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_MatchSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_MatchSnapshot, match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_MatchSnapshot, paigow_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Match)},
  { 15, -1, sizeof(C2S_CreateMatch)},
  { 23, -1, sizeof(S2C_CreateMatch)},
  { 31, -1, sizeof(C2S_JoinMatch)},
  { 37, -1, sizeof(S2C_JoinMatch)},
  { 43, -1, sizeof(S2C_MatchSnapshot)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Match_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_C2S_CreateMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2C_CreateMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_C2S_JoinMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2C_JoinMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2C_MatchSnapshot_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "game.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _Match_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _C2S_CreateMatch_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _S2C_CreateMatch_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _C2S_JoinMatch_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _S2C_JoinMatch_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _S2C_MatchSnapshot_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto3_proto::protobuf_paigow_2eproto::InitDefaults();
  ::proto3_proto::protobuf_common_2eproto::InitDefaults();
  _Match_default_instance_.DefaultConstruct();
  _C2S_CreateMatch_default_instance_.DefaultConstruct();
  _S2C_CreateMatch_default_instance_.DefaultConstruct();
  _C2S_JoinMatch_default_instance_.DefaultConstruct();
  _S2C_JoinMatch_default_instance_.DefaultConstruct();
  _S2C_MatchSnapshot_default_instance_.DefaultConstruct();
  _Match_default_instance_.get_mutable()->paigow_ = const_cast< ::proto3_proto::PaiGowConfig*>(
      ::proto3_proto::PaiGowConfig::internal_default_instance());
  _C2S_CreateMatch_default_instance_.get_mutable()->paigow_ = const_cast< ::proto3_proto::PaiGowConfig*>(
      ::proto3_proto::PaiGowConfig::internal_default_instance());
  _S2C_CreateMatch_default_instance_.get_mutable()->match_ = const_cast< ::proto3_proto::Match*>(
      ::proto3_proto::Match::internal_default_instance());
  _S2C_MatchSnapshot_default_instance_.get_mutable()->match_ = const_cast< ::proto3_proto::Match*>(
      ::proto3_proto::Match::internal_default_instance());
  _S2C_MatchSnapshot_default_instance_.get_mutable()->paigow_ = const_cast< ::proto3_proto::PaiGowSnapshot*>(
      ::proto3_proto::PaiGowSnapshot::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\ngame.proto\022\014proto3_proto\032\014paigow.proto"
      "\032\014common.proto\"\347\001\n\005Match\022\017\n\007room_id\030\001 \001("
      "\005\022\014\n\004type\030\002 \001(\005\022\023\n\013create_time\030\003 \001(\003\022\022\n\n"
      "begin_time\030\004 \001(\003\022\023\n\013total_round\030\005 \001(\005\022\014\n"
      "\004cost\030\006 \001(\005\022\r\n\005state\030\007 \001(\005\022\r\n\005round\030\010 \001("
      "\005\022*\n\006paigow\030\t \001(\0132\032.proto3_proto.PaiGowC"
      "onfig\022)\n\007players\030\n \003(\0132\030.proto3_proto.Pl"
      "ayerInfo\"^\n\017C2S_CreateMatch\022\021\n\tfor_other"
      "\030\001 \001(\010\022\014\n\004type\030\002 \001(\005\022*\n\006paigow\030\005 \001(\0132\032.p"
      "roto3_proto.PaiGowConfig\"V\n\017S2C_CreateMa"
      "tch\022\014\n\004code\030\001 \001(\005\022\021\n\tfor_other\030\002 \001(\010\022\"\n\005"
      "match\030\003 \001(\0132\023.proto3_proto.Match\" \n\rC2S_"
      "JoinMatch\022\017\n\007room_id\030\001 \001(\005\" \n\rS2C_JoinMa"
      "tch\022\017\n\007user_id\030\001 \001(\003\"e\n\021S2C_MatchSnapsho"
      "t\022\"\n\005match\030\001 \001(\0132\023.proto3_proto.Match\022,\n"
      "\006paigow\030\002 \001(\0132\034.proto3_proto.PaiGowSnaps"
      "hotb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 651);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "game.proto", &protobuf_RegisterTypes);
  ::proto3_proto::protobuf_paigow_2eproto::AddDescriptors();
  ::proto3_proto::protobuf_common_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_game_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Match::kRoomIdFieldNumber;
const int Match::kTypeFieldNumber;
const int Match::kCreateTimeFieldNumber;
const int Match::kBeginTimeFieldNumber;
const int Match::kTotalRoundFieldNumber;
const int Match::kCostFieldNumber;
const int Match::kStateFieldNumber;
const int Match::kRoundFieldNumber;
const int Match::kPaigowFieldNumber;
const int Match::kPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Match::Match()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.Match)
}
Match::Match(const Match& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      players_(from.players_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_paigow()) {
    paigow_ = new ::proto3_proto::PaiGowConfig(*from.paigow_);
  } else {
    paigow_ = NULL;
  }
  ::memcpy(&room_id_, &from.room_id_,
    reinterpret_cast<char*>(&round_) -
    reinterpret_cast<char*>(&room_id_) + sizeof(round_));
  // @@protoc_insertion_point(copy_constructor:proto3_proto.Match)
}

void Match::SharedCtor() {
  ::memset(&paigow_, 0, reinterpret_cast<char*>(&round_) -
    reinterpret_cast<char*>(&paigow_) + sizeof(round_));
  _cached_size_ = 0;
}

Match::~Match() {
  // @@protoc_insertion_point(destructor:proto3_proto.Match)
  SharedDtor();
}

void Match::SharedDtor() {
  if (this != internal_default_instance()) {
    delete paigow_;
  }
}

void Match::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Match& Match::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

Match* Match::New(::google::protobuf::Arena* arena) const {
  Match* n = new Match;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Match::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.Match)
  players_.Clear();
  if (GetArenaNoVirtual() == NULL && paigow_ != NULL) {
    delete paigow_;
  }
  paigow_ = NULL;
  ::memset(&room_id_, 0, reinterpret_cast<char*>(&round_) -
    reinterpret_cast<char*>(&room_id_) + sizeof(round_));
}

bool Match::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.Match)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 create_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &create_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 begin_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total_round = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cost = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 round = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto3_proto.PaiGowConfig paigow = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paigow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto3_proto.PlayerInfo players = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.Match)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.Match)
  return false;
#undef DO_
}

void Match::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.Match)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // int64 create_time = 3;
  if (this->create_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->create_time(), output);
  }

  // int64 begin_time = 4;
  if (this->begin_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->begin_time(), output);
  }

  // int32 total_round = 5;
  if (this->total_round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->total_round(), output);
  }

  // int32 cost = 6;
  if (this->cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->cost(), output);
  }

  // int32 state = 7;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->state(), output);
  }

  // int32 round = 8;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->round(), output);
  }

  // .proto3_proto.PaiGowConfig paigow = 9;
  if (this->has_paigow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->paigow_, output);
  }

  // repeated .proto3_proto.PlayerInfo players = 10;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->players(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.Match)
}

::google::protobuf::uint8* Match::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.Match)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // int64 create_time = 3;
  if (this->create_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->create_time(), target);
  }

  // int64 begin_time = 4;
  if (this->begin_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->begin_time(), target);
  }

  // int32 total_round = 5;
  if (this->total_round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->total_round(), target);
  }

  // int32 cost = 6;
  if (this->cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cost(), target);
  }

  // int32 state = 7;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->state(), target);
  }

  // int32 round = 8;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->round(), target);
  }

  // .proto3_proto.PaiGowConfig paigow = 9;
  if (this->has_paigow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->paigow_, deterministic, target);
  }

  // repeated .proto3_proto.PlayerInfo players = 10;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, this->players(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.Match)
  return target;
}

size_t Match::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.Match)
  size_t total_size = 0;

  // repeated .proto3_proto.PlayerInfo players = 10;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  // .proto3_proto.PaiGowConfig paigow = 9;
  if (this->has_paigow()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->paigow_);
  }

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int64 create_time = 3;
  if (this->create_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->create_time());
  }

  // int64 begin_time = 4;
  if (this->begin_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->begin_time());
  }

  // int32 total_round = 5;
  if (this->total_round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_round());
  }

  // int32 cost = 6;
  if (this->cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cost());
  }

  // int32 state = 7;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  // int32 round = 8;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->round());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.Match)
  GOOGLE_DCHECK_NE(&from, this);
  const Match* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Match>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.Match)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.Match)
    MergeFrom(*source);
  }
}

void Match::MergeFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.Match)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  if (from.has_paigow()) {
    mutable_paigow()->::proto3_proto::PaiGowConfig::MergeFrom(from.paigow());
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.create_time() != 0) {
    set_create_time(from.create_time());
  }
  if (from.begin_time() != 0) {
    set_begin_time(from.begin_time());
  }
  if (from.total_round() != 0) {
    set_total_round(from.total_round());
  }
  if (from.cost() != 0) {
    set_cost(from.cost());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
}

void Match::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match::CopyFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match::IsInitialized() const {
  return true;
}

void Match::Swap(Match* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Match::InternalSwap(Match* other) {
  players_.InternalSwap(&other->players_);
  std::swap(paigow_, other->paigow_);
  std::swap(room_id_, other->room_id_);
  std::swap(type_, other->type_);
  std::swap(create_time_, other->create_time_);
  std::swap(begin_time_, other->begin_time_);
  std::swap(total_round_, other->total_round_);
  std::swap(cost_, other->cost_);
  std::swap(state_, other->state_);
  std::swap(round_, other->round_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Match::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Match

// int32 room_id = 1;
void Match::clear_room_id() {
  room_id_ = 0;
}
::google::protobuf::int32 Match::room_id() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Match.room_id)
  return room_id_;
}
void Match::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.Match.room_id)
}

// int32 type = 2;
void Match::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 Match::type() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Match.type)
  return type_;
}
void Match::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.Match.type)
}

// int64 create_time = 3;
void Match::clear_create_time() {
  create_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Match::create_time() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Match.create_time)
  return create_time_;
}
void Match::set_create_time(::google::protobuf::int64 value) {
  
  create_time_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.Match.create_time)
}

// int64 begin_time = 4;
void Match::clear_begin_time() {
  begin_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Match::begin_time() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Match.begin_time)
  return begin_time_;
}
void Match::set_begin_time(::google::protobuf::int64 value) {
  
  begin_time_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.Match.begin_time)
}

// int32 total_round = 5;
void Match::clear_total_round() {
  total_round_ = 0;
}
::google::protobuf::int32 Match::total_round() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Match.total_round)
  return total_round_;
}
void Match::set_total_round(::google::protobuf::int32 value) {
  
  total_round_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.Match.total_round)
}

// int32 cost = 6;
void Match::clear_cost() {
  cost_ = 0;
}
::google::protobuf::int32 Match::cost() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Match.cost)
  return cost_;
}
void Match::set_cost(::google::protobuf::int32 value) {
  
  cost_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.Match.cost)
}

// int32 state = 7;
void Match::clear_state() {
  state_ = 0;
}
::google::protobuf::int32 Match::state() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Match.state)
  return state_;
}
void Match::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.Match.state)
}

// int32 round = 8;
void Match::clear_round() {
  round_ = 0;
}
::google::protobuf::int32 Match::round() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Match.round)
  return round_;
}
void Match::set_round(::google::protobuf::int32 value) {
  
  round_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.Match.round)
}

// .proto3_proto.PaiGowConfig paigow = 9;
bool Match::has_paigow() const {
  return this != internal_default_instance() && paigow_ != NULL;
}
void Match::clear_paigow() {
  if (GetArenaNoVirtual() == NULL && paigow_ != NULL) delete paigow_;
  paigow_ = NULL;
}
const ::proto3_proto::PaiGowConfig& Match::paigow() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Match.paigow)
  return paigow_ != NULL ? *paigow_
                         : *::proto3_proto::PaiGowConfig::internal_default_instance();
}
::proto3_proto::PaiGowConfig* Match::mutable_paigow() {
  
  if (paigow_ == NULL) {
    paigow_ = new ::proto3_proto::PaiGowConfig;
  }
  // @@protoc_insertion_point(field_mutable:proto3_proto.Match.paigow)
  return paigow_;
}
::proto3_proto::PaiGowConfig* Match::release_paigow() {
  // @@protoc_insertion_point(field_release:proto3_proto.Match.paigow)
  
  ::proto3_proto::PaiGowConfig* temp = paigow_;
  paigow_ = NULL;
  return temp;
}
void Match::set_allocated_paigow(::proto3_proto::PaiGowConfig* paigow) {
  delete paigow_;
  paigow_ = paigow;
  if (paigow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3_proto.Match.paigow)
}

// repeated .proto3_proto.PlayerInfo players = 10;
int Match::players_size() const {
  return players_.size();
}
void Match::clear_players() {
  players_.Clear();
}
const ::proto3_proto::PlayerInfo& Match::players(int index) const {
  // @@protoc_insertion_point(field_get:proto3_proto.Match.players)
  return players_.Get(index);
}
::proto3_proto::PlayerInfo* Match::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto3_proto.Match.players)
  return players_.Mutable(index);
}
::proto3_proto::PlayerInfo* Match::add_players() {
  // @@protoc_insertion_point(field_add:proto3_proto.Match.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3_proto::PlayerInfo >*
Match::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto3_proto.Match.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3_proto::PlayerInfo >&
Match::players() const {
  // @@protoc_insertion_point(field_list:proto3_proto.Match.players)
  return players_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2S_CreateMatch::kForOtherFieldNumber;
const int C2S_CreateMatch::kTypeFieldNumber;
const int C2S_CreateMatch::kPaigowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2S_CreateMatch::C2S_CreateMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.C2S_CreateMatch)
}
C2S_CreateMatch::C2S_CreateMatch(const C2S_CreateMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_paigow()) {
    paigow_ = new ::proto3_proto::PaiGowConfig(*from.paigow_);
  } else {
    paigow_ = NULL;
  }
  ::memcpy(&for_other_, &from.for_other_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&for_other_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:proto3_proto.C2S_CreateMatch)
}

void C2S_CreateMatch::SharedCtor() {
  ::memset(&paigow_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&paigow_) + sizeof(type_));
  _cached_size_ = 0;
}

C2S_CreateMatch::~C2S_CreateMatch() {
  // @@protoc_insertion_point(destructor:proto3_proto.C2S_CreateMatch)
  SharedDtor();
}

void C2S_CreateMatch::SharedDtor() {
  if (this != internal_default_instance()) {
    delete paigow_;
  }
}

void C2S_CreateMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_CreateMatch::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2S_CreateMatch& C2S_CreateMatch::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

C2S_CreateMatch* C2S_CreateMatch::New(::google::protobuf::Arena* arena) const {
  C2S_CreateMatch* n = new C2S_CreateMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2S_CreateMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.C2S_CreateMatch)
  if (GetArenaNoVirtual() == NULL && paigow_ != NULL) {
    delete paigow_;
  }
  paigow_ = NULL;
  ::memset(&for_other_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&for_other_) + sizeof(type_));
}

bool C2S_CreateMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.C2S_CreateMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool for_other = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &for_other_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto3_proto.PaiGowConfig paigow = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paigow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.C2S_CreateMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.C2S_CreateMatch)
  return false;
#undef DO_
}

void C2S_CreateMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.C2S_CreateMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool for_other = 1;
  if (this->for_other() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->for_other(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // .proto3_proto.PaiGowConfig paigow = 5;
  if (this->has_paigow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->paigow_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.C2S_CreateMatch)
}

::google::protobuf::uint8* C2S_CreateMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.C2S_CreateMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool for_other = 1;
  if (this->for_other() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->for_other(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // .proto3_proto.PaiGowConfig paigow = 5;
  if (this->has_paigow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->paigow_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.C2S_CreateMatch)
  return target;
}

size_t C2S_CreateMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.C2S_CreateMatch)
  size_t total_size = 0;

  // .proto3_proto.PaiGowConfig paigow = 5;
  if (this->has_paigow()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->paigow_);
  }

  // bool for_other = 1;
  if (this->for_other() != 0) {
    total_size += 1 + 1;
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_CreateMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.C2S_CreateMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_CreateMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2S_CreateMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.C2S_CreateMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.C2S_CreateMatch)
    MergeFrom(*source);
  }
}

void C2S_CreateMatch::MergeFrom(const C2S_CreateMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.C2S_CreateMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_paigow()) {
    mutable_paigow()->::proto3_proto::PaiGowConfig::MergeFrom(from.paigow());
  }
  if (from.for_other() != 0) {
    set_for_other(from.for_other());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void C2S_CreateMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.C2S_CreateMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_CreateMatch::CopyFrom(const C2S_CreateMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.C2S_CreateMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_CreateMatch::IsInitialized() const {
  return true;
}

void C2S_CreateMatch::Swap(C2S_CreateMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2S_CreateMatch::InternalSwap(C2S_CreateMatch* other) {
  std::swap(paigow_, other->paigow_);
  std::swap(for_other_, other->for_other_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2S_CreateMatch::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2S_CreateMatch

// bool for_other = 1;
void C2S_CreateMatch::clear_for_other() {
  for_other_ = false;
}
bool C2S_CreateMatch::for_other() const {
  // @@protoc_insertion_point(field_get:proto3_proto.C2S_CreateMatch.for_other)
  return for_other_;
}
void C2S_CreateMatch::set_for_other(bool value) {
  
  for_other_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.C2S_CreateMatch.for_other)
}

// int32 type = 2;
void C2S_CreateMatch::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 C2S_CreateMatch::type() const {
  // @@protoc_insertion_point(field_get:proto3_proto.C2S_CreateMatch.type)
  return type_;
}
void C2S_CreateMatch::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.C2S_CreateMatch.type)
}

// .proto3_proto.PaiGowConfig paigow = 5;
bool C2S_CreateMatch::has_paigow() const {
  return this != internal_default_instance() && paigow_ != NULL;
}
void C2S_CreateMatch::clear_paigow() {
  if (GetArenaNoVirtual() == NULL && paigow_ != NULL) delete paigow_;
  paigow_ = NULL;
}
const ::proto3_proto::PaiGowConfig& C2S_CreateMatch::paigow() const {
  // @@protoc_insertion_point(field_get:proto3_proto.C2S_CreateMatch.paigow)
  return paigow_ != NULL ? *paigow_
                         : *::proto3_proto::PaiGowConfig::internal_default_instance();
}
::proto3_proto::PaiGowConfig* C2S_CreateMatch::mutable_paigow() {
  
  if (paigow_ == NULL) {
    paigow_ = new ::proto3_proto::PaiGowConfig;
  }
  // @@protoc_insertion_point(field_mutable:proto3_proto.C2S_CreateMatch.paigow)
  return paigow_;
}
::proto3_proto::PaiGowConfig* C2S_CreateMatch::release_paigow() {
  // @@protoc_insertion_point(field_release:proto3_proto.C2S_CreateMatch.paigow)
  
  ::proto3_proto::PaiGowConfig* temp = paigow_;
  paigow_ = NULL;
  return temp;
}
void C2S_CreateMatch::set_allocated_paigow(::proto3_proto::PaiGowConfig* paigow) {
  delete paigow_;
  paigow_ = paigow;
  if (paigow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3_proto.C2S_CreateMatch.paigow)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2C_CreateMatch::kCodeFieldNumber;
const int S2C_CreateMatch::kForOtherFieldNumber;
const int S2C_CreateMatch::kMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2C_CreateMatch::S2C_CreateMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.S2C_CreateMatch)
}
S2C_CreateMatch::S2C_CreateMatch(const S2C_CreateMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_match()) {
    match_ = new ::proto3_proto::Match(*from.match_);
  } else {
    match_ = NULL;
  }
  ::memcpy(&code_, &from.code_,
    reinterpret_cast<char*>(&for_other_) -
    reinterpret_cast<char*>(&code_) + sizeof(for_other_));
  // @@protoc_insertion_point(copy_constructor:proto3_proto.S2C_CreateMatch)
}

void S2C_CreateMatch::SharedCtor() {
  ::memset(&match_, 0, reinterpret_cast<char*>(&for_other_) -
    reinterpret_cast<char*>(&match_) + sizeof(for_other_));
  _cached_size_ = 0;
}

S2C_CreateMatch::~S2C_CreateMatch() {
  // @@protoc_insertion_point(destructor:proto3_proto.S2C_CreateMatch)
  SharedDtor();
}

void S2C_CreateMatch::SharedDtor() {
  if (this != internal_default_instance()) {
    delete match_;
  }
}

void S2C_CreateMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_CreateMatch::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2C_CreateMatch& S2C_CreateMatch::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2C_CreateMatch* S2C_CreateMatch::New(::google::protobuf::Arena* arena) const {
  S2C_CreateMatch* n = new S2C_CreateMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2C_CreateMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.S2C_CreateMatch)
  if (GetArenaNoVirtual() == NULL && match_ != NULL) {
    delete match_;
  }
  match_ = NULL;
  ::memset(&code_, 0, reinterpret_cast<char*>(&for_other_) -
    reinterpret_cast<char*>(&code_) + sizeof(for_other_));
}

bool S2C_CreateMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.S2C_CreateMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool for_other = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &for_other_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto3_proto.Match match = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.S2C_CreateMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.S2C_CreateMatch)
  return false;
#undef DO_
}

void S2C_CreateMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.S2C_CreateMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // bool for_other = 2;
  if (this->for_other() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->for_other(), output);
  }

  // .proto3_proto.Match match = 3;
  if (this->has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->match_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.S2C_CreateMatch)
}

::google::protobuf::uint8* S2C_CreateMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.S2C_CreateMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // bool for_other = 2;
  if (this->for_other() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->for_other(), target);
  }

  // .proto3_proto.Match match = 3;
  if (this->has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->match_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.S2C_CreateMatch)
  return target;
}

size_t S2C_CreateMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.S2C_CreateMatch)
  size_t total_size = 0;

  // .proto3_proto.Match match = 3;
  if (this->has_match()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->match_);
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // bool for_other = 2;
  if (this->for_other() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_CreateMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.S2C_CreateMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_CreateMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2C_CreateMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.S2C_CreateMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.S2C_CreateMatch)
    MergeFrom(*source);
  }
}

void S2C_CreateMatch::MergeFrom(const S2C_CreateMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.S2C_CreateMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_match()) {
    mutable_match()->::proto3_proto::Match::MergeFrom(from.match());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.for_other() != 0) {
    set_for_other(from.for_other());
  }
}

void S2C_CreateMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.S2C_CreateMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_CreateMatch::CopyFrom(const S2C_CreateMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.S2C_CreateMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_CreateMatch::IsInitialized() const {
  return true;
}

void S2C_CreateMatch::Swap(S2C_CreateMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2C_CreateMatch::InternalSwap(S2C_CreateMatch* other) {
  std::swap(match_, other->match_);
  std::swap(code_, other->code_);
  std::swap(for_other_, other->for_other_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2C_CreateMatch::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2C_CreateMatch

// int32 code = 1;
void S2C_CreateMatch::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 S2C_CreateMatch::code() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_CreateMatch.code)
  return code_;
}
void S2C_CreateMatch::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_CreateMatch.code)
}

// bool for_other = 2;
void S2C_CreateMatch::clear_for_other() {
  for_other_ = false;
}
bool S2C_CreateMatch::for_other() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_CreateMatch.for_other)
  return for_other_;
}
void S2C_CreateMatch::set_for_other(bool value) {
  
  for_other_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_CreateMatch.for_other)
}

// .proto3_proto.Match match = 3;
bool S2C_CreateMatch::has_match() const {
  return this != internal_default_instance() && match_ != NULL;
}
void S2C_CreateMatch::clear_match() {
  if (GetArenaNoVirtual() == NULL && match_ != NULL) delete match_;
  match_ = NULL;
}
const ::proto3_proto::Match& S2C_CreateMatch::match() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_CreateMatch.match)
  return match_ != NULL ? *match_
                         : *::proto3_proto::Match::internal_default_instance();
}
::proto3_proto::Match* S2C_CreateMatch::mutable_match() {
  
  if (match_ == NULL) {
    match_ = new ::proto3_proto::Match;
  }
  // @@protoc_insertion_point(field_mutable:proto3_proto.S2C_CreateMatch.match)
  return match_;
}
::proto3_proto::Match* S2C_CreateMatch::release_match() {
  // @@protoc_insertion_point(field_release:proto3_proto.S2C_CreateMatch.match)
  
  ::proto3_proto::Match* temp = match_;
  match_ = NULL;
  return temp;
}
void S2C_CreateMatch::set_allocated_match(::proto3_proto::Match* match) {
  delete match_;
  match_ = match;
  if (match) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3_proto.S2C_CreateMatch.match)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2S_JoinMatch::kRoomIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2S_JoinMatch::C2S_JoinMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.C2S_JoinMatch)
}
C2S_JoinMatch::C2S_JoinMatch(const C2S_JoinMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  room_id_ = from.room_id_;
  // @@protoc_insertion_point(copy_constructor:proto3_proto.C2S_JoinMatch)
}

void C2S_JoinMatch::SharedCtor() {
  room_id_ = 0;
  _cached_size_ = 0;
}

C2S_JoinMatch::~C2S_JoinMatch() {
  // @@protoc_insertion_point(destructor:proto3_proto.C2S_JoinMatch)
  SharedDtor();
}

void C2S_JoinMatch::SharedDtor() {
}

void C2S_JoinMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_JoinMatch::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2S_JoinMatch& C2S_JoinMatch::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

C2S_JoinMatch* C2S_JoinMatch::New(::google::protobuf::Arena* arena) const {
  C2S_JoinMatch* n = new C2S_JoinMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2S_JoinMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.C2S_JoinMatch)
  room_id_ = 0;
}

bool C2S_JoinMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.C2S_JoinMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.C2S_JoinMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.C2S_JoinMatch)
  return false;
#undef DO_
}

void C2S_JoinMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.C2S_JoinMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.C2S_JoinMatch)
}

::google::protobuf::uint8* C2S_JoinMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.C2S_JoinMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.C2S_JoinMatch)
  return target;
}

size_t C2S_JoinMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.C2S_JoinMatch)
  size_t total_size = 0;

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_JoinMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.C2S_JoinMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_JoinMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2S_JoinMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.C2S_JoinMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.C2S_JoinMatch)
    MergeFrom(*source);
  }
}

void C2S_JoinMatch::MergeFrom(const C2S_JoinMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.C2S_JoinMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
}

void C2S_JoinMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.C2S_JoinMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_JoinMatch::CopyFrom(const C2S_JoinMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.C2S_JoinMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_JoinMatch::IsInitialized() const {
  return true;
}

void C2S_JoinMatch::Swap(C2S_JoinMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2S_JoinMatch::InternalSwap(C2S_JoinMatch* other) {
  std::swap(room_id_, other->room_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2S_JoinMatch::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2S_JoinMatch

// int32 room_id = 1;
void C2S_JoinMatch::clear_room_id() {
  room_id_ = 0;
}
::google::protobuf::int32 C2S_JoinMatch::room_id() const {
  // @@protoc_insertion_point(field_get:proto3_proto.C2S_JoinMatch.room_id)
  return room_id_;
}
void C2S_JoinMatch::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.C2S_JoinMatch.room_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2C_JoinMatch::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2C_JoinMatch::S2C_JoinMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.S2C_JoinMatch)
}
S2C_JoinMatch::S2C_JoinMatch(const S2C_JoinMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:proto3_proto.S2C_JoinMatch)
}

void S2C_JoinMatch::SharedCtor() {
  user_id_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

S2C_JoinMatch::~S2C_JoinMatch() {
  // @@protoc_insertion_point(destructor:proto3_proto.S2C_JoinMatch)
  SharedDtor();
}

void S2C_JoinMatch::SharedDtor() {
}

void S2C_JoinMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_JoinMatch::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2C_JoinMatch& S2C_JoinMatch::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2C_JoinMatch* S2C_JoinMatch::New(::google::protobuf::Arena* arena) const {
  S2C_JoinMatch* n = new S2C_JoinMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2C_JoinMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.S2C_JoinMatch)
  user_id_ = GOOGLE_LONGLONG(0);
}

bool S2C_JoinMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.S2C_JoinMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.S2C_JoinMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.S2C_JoinMatch)
  return false;
#undef DO_
}

void S2C_JoinMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.S2C_JoinMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.S2C_JoinMatch)
}

::google::protobuf::uint8* S2C_JoinMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.S2C_JoinMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.S2C_JoinMatch)
  return target;
}

size_t S2C_JoinMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.S2C_JoinMatch)
  size_t total_size = 0;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_JoinMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.S2C_JoinMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_JoinMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2C_JoinMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.S2C_JoinMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.S2C_JoinMatch)
    MergeFrom(*source);
  }
}

void S2C_JoinMatch::MergeFrom(const S2C_JoinMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.S2C_JoinMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void S2C_JoinMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.S2C_JoinMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_JoinMatch::CopyFrom(const S2C_JoinMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.S2C_JoinMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_JoinMatch::IsInitialized() const {
  return true;
}

void S2C_JoinMatch::Swap(S2C_JoinMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2C_JoinMatch::InternalSwap(S2C_JoinMatch* other) {
  std::swap(user_id_, other->user_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2C_JoinMatch::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2C_JoinMatch

// int64 user_id = 1;
void S2C_JoinMatch::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 S2C_JoinMatch::user_id() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_JoinMatch.user_id)
  return user_id_;
}
void S2C_JoinMatch::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_JoinMatch.user_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2C_MatchSnapshot::kMatchFieldNumber;
const int S2C_MatchSnapshot::kPaigowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2C_MatchSnapshot::S2C_MatchSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_game_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.S2C_MatchSnapshot)
}
S2C_MatchSnapshot::S2C_MatchSnapshot(const S2C_MatchSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_match()) {
    match_ = new ::proto3_proto::Match(*from.match_);
  } else {
    match_ = NULL;
  }
  if (from.has_paigow()) {
    paigow_ = new ::proto3_proto::PaiGowSnapshot(*from.paigow_);
  } else {
    paigow_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto3_proto.S2C_MatchSnapshot)
}

void S2C_MatchSnapshot::SharedCtor() {
  ::memset(&match_, 0, reinterpret_cast<char*>(&paigow_) -
    reinterpret_cast<char*>(&match_) + sizeof(paigow_));
  _cached_size_ = 0;
}

S2C_MatchSnapshot::~S2C_MatchSnapshot() {
  // @@protoc_insertion_point(destructor:proto3_proto.S2C_MatchSnapshot)
  SharedDtor();
}

void S2C_MatchSnapshot::SharedDtor() {
  if (this != internal_default_instance()) {
    delete match_;
  }
  if (this != internal_default_instance()) {
    delete paigow_;
  }
}

void S2C_MatchSnapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_MatchSnapshot::descriptor() {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2C_MatchSnapshot& S2C_MatchSnapshot::default_instance() {
  protobuf_game_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2C_MatchSnapshot* S2C_MatchSnapshot::New(::google::protobuf::Arena* arena) const {
  S2C_MatchSnapshot* n = new S2C_MatchSnapshot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2C_MatchSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.S2C_MatchSnapshot)
  if (GetArenaNoVirtual() == NULL && match_ != NULL) {
    delete match_;
  }
  match_ = NULL;
  if (GetArenaNoVirtual() == NULL && paigow_ != NULL) {
    delete paigow_;
  }
  paigow_ = NULL;
}

bool S2C_MatchSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.S2C_MatchSnapshot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto3_proto.Match match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto3_proto.PaiGowSnapshot paigow = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paigow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.S2C_MatchSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.S2C_MatchSnapshot)
  return false;
#undef DO_
}

void S2C_MatchSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.S2C_MatchSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto3_proto.Match match = 1;
  if (this->has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->match_, output);
  }

  // .proto3_proto.PaiGowSnapshot paigow = 2;
  if (this->has_paigow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->paigow_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.S2C_MatchSnapshot)
}

::google::protobuf::uint8* S2C_MatchSnapshot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.S2C_MatchSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto3_proto.Match match = 1;
  if (this->has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->match_, deterministic, target);
  }

  // .proto3_proto.PaiGowSnapshot paigow = 2;
  if (this->has_paigow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->paigow_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.S2C_MatchSnapshot)
  return target;
}

size_t S2C_MatchSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.S2C_MatchSnapshot)
  size_t total_size = 0;

  // .proto3_proto.Match match = 1;
  if (this->has_match()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->match_);
  }

  // .proto3_proto.PaiGowSnapshot paigow = 2;
  if (this->has_paigow()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->paigow_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_MatchSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.S2C_MatchSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_MatchSnapshot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2C_MatchSnapshot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.S2C_MatchSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.S2C_MatchSnapshot)
    MergeFrom(*source);
  }
}

void S2C_MatchSnapshot::MergeFrom(const S2C_MatchSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.S2C_MatchSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_match()) {
    mutable_match()->::proto3_proto::Match::MergeFrom(from.match());
  }
  if (from.has_paigow()) {
    mutable_paigow()->::proto3_proto::PaiGowSnapshot::MergeFrom(from.paigow());
  }
}

void S2C_MatchSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.S2C_MatchSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_MatchSnapshot::CopyFrom(const S2C_MatchSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.S2C_MatchSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_MatchSnapshot::IsInitialized() const {
  return true;
}

void S2C_MatchSnapshot::Swap(S2C_MatchSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2C_MatchSnapshot::InternalSwap(S2C_MatchSnapshot* other) {
  std::swap(match_, other->match_);
  std::swap(paigow_, other->paigow_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2C_MatchSnapshot::GetMetadata() const {
  protobuf_game_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_game_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2C_MatchSnapshot

// .proto3_proto.Match match = 1;
bool S2C_MatchSnapshot::has_match() const {
  return this != internal_default_instance() && match_ != NULL;
}
void S2C_MatchSnapshot::clear_match() {
  if (GetArenaNoVirtual() == NULL && match_ != NULL) delete match_;
  match_ = NULL;
}
const ::proto3_proto::Match& S2C_MatchSnapshot::match() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_MatchSnapshot.match)
  return match_ != NULL ? *match_
                         : *::proto3_proto::Match::internal_default_instance();
}
::proto3_proto::Match* S2C_MatchSnapshot::mutable_match() {
  
  if (match_ == NULL) {
    match_ = new ::proto3_proto::Match;
  }
  // @@protoc_insertion_point(field_mutable:proto3_proto.S2C_MatchSnapshot.match)
  return match_;
}
::proto3_proto::Match* S2C_MatchSnapshot::release_match() {
  // @@protoc_insertion_point(field_release:proto3_proto.S2C_MatchSnapshot.match)
  
  ::proto3_proto::Match* temp = match_;
  match_ = NULL;
  return temp;
}
void S2C_MatchSnapshot::set_allocated_match(::proto3_proto::Match* match) {
  delete match_;
  match_ = match;
  if (match) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3_proto.S2C_MatchSnapshot.match)
}

// .proto3_proto.PaiGowSnapshot paigow = 2;
bool S2C_MatchSnapshot::has_paigow() const {
  return this != internal_default_instance() && paigow_ != NULL;
}
void S2C_MatchSnapshot::clear_paigow() {
  if (GetArenaNoVirtual() == NULL && paigow_ != NULL) delete paigow_;
  paigow_ = NULL;
}
const ::proto3_proto::PaiGowSnapshot& S2C_MatchSnapshot::paigow() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_MatchSnapshot.paigow)
  return paigow_ != NULL ? *paigow_
                         : *::proto3_proto::PaiGowSnapshot::internal_default_instance();
}
::proto3_proto::PaiGowSnapshot* S2C_MatchSnapshot::mutable_paigow() {
  
  if (paigow_ == NULL) {
    paigow_ = new ::proto3_proto::PaiGowSnapshot;
  }
  // @@protoc_insertion_point(field_mutable:proto3_proto.S2C_MatchSnapshot.paigow)
  return paigow_;
}
::proto3_proto::PaiGowSnapshot* S2C_MatchSnapshot::release_paigow() {
  // @@protoc_insertion_point(field_release:proto3_proto.S2C_MatchSnapshot.paigow)
  
  ::proto3_proto::PaiGowSnapshot* temp = paigow_;
  paigow_ = NULL;
  return temp;
}
void S2C_MatchSnapshot::set_allocated_paigow(::proto3_proto::PaiGowSnapshot* paigow) {
  delete paigow_;
  paigow_ = paigow;
  if (paigow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3_proto.S2C_MatchSnapshot.paigow)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto3_proto

// @@protoc_insertion_point(global_scope)
