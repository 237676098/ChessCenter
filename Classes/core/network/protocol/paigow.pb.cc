// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paigow.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "paigow.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto3_proto {
class PaiGowConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PaiGowConfig> {
} _PaiGowConfig_default_instance_;
class PaiGowPlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PaiGowPlayer> {
} _PaiGowPlayer_default_instance_;
class PaiGowResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PaiGowResult> {
} _PaiGowResult_default_instance_;
class PaiGowSnapshotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PaiGowSnapshot> {
} _PaiGowSnapshot_default_instance_;
class S2C_PG_AddPlayerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2C_PG_AddPlayer> {
} _S2C_PG_AddPlayer_default_instance_;
class C2S_PG_StartGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<C2S_PG_StartGame> {
} _C2S_PG_StartGame_default_instance_;
class S2C_PG_StartGameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2C_PG_StartGame> {
} _S2C_PG_StartGame_default_instance_;
class C2S_PG_GrabBankerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<C2S_PG_GrabBanker> {
} _C2S_PG_GrabBanker_default_instance_;
class S2C_PG_GrabBankerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2C_PG_GrabBanker> {
} _S2C_PG_GrabBanker_default_instance_;
class S2C_PG_GrabBanker_RESDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2C_PG_GrabBanker_RES> {
} _S2C_PG_GrabBanker_RES_default_instance_;
class C2S_PG_BetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<C2S_PG_Bet> {
} _C2S_PG_Bet_default_instance_;
class S2C_PG_BetDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2C_PG_Bet> {
} _S2C_PG_Bet_default_instance_;
class S2C_PG_DealDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2C_PG_Deal> {
} _S2C_PG_Deal_default_instance_;
class C2S_PG_CollocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<C2S_PG_Collocation> {
} _C2S_PG_Collocation_default_instance_;
class S2C_PG_CollocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2C_PG_Collocation> {
} _S2C_PG_Collocation_default_instance_;
class S2C_PG_ResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2C_PG_Result> {
} _S2C_PG_Result_default_instance_;
class C2S_PG_SureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<C2S_PG_Sure> {
} _C2S_PG_Sure_default_instance_;
class S2C_PG_SureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2C_PG_Sure> {
} _S2C_PG_Sure_default_instance_;
class C2S_PG_KickDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<C2S_PG_Kick> {
} _C2S_PG_Kick_default_instance_;
class S2C_PG_KickDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2C_PG_Kick> {
} _S2C_PG_Kick_default_instance_;

namespace protobuf_paigow_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[20];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowConfig, pot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowConfig, banker_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowConfig, is_bet_always_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowConfig, lock_bet_num_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowConfig, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowConfig, has_ghost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowConfig, has_heaven_nine_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowPlayer, player_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowPlayer, hand_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowPlayer, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowPlayer, is_grab_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowPlayer, chips_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowPlayer, score_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowResult, seat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowResult, result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowResult, total_result_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowResult, hand_cards_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowSnapshot, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowSnapshot, room_owner_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowSnapshot, public_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowSnapshot, players_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowSnapshot, results_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowSnapshot, banker_seat_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_AddPlayer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_AddPlayer, player_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PG_StartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_StartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_StartGame, is_grab_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PG_GrabBanker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PG_GrabBanker, is_grab_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_GrabBanker, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_GrabBanker, seat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_GrabBanker, is_grab_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_GrabBanker_RES, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_GrabBanker_RES, seat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_GrabBanker_RES, is_bet_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PG_Bet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PG_Bet, chips_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_Bet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_Bet, seat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_Bet, chips_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_Deal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_Deal, my_card_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PG_Collocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PG_Collocation, first_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PG_Collocation, end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_Collocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_Collocation, seat_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_Collocation, first_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_Collocation, end_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_Collocation, test_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_Result, scores_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_Result, public_cards_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_Result, is_end_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PG_Sure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_Sure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_Sure, seat_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PG_Kick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_PG_Kick, seat_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_Kick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_PG_Kick, seat_id_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(PaiGowConfig)},
  { 12, -1, sizeof(PaiGowPlayer)},
  { 23, -1, sizeof(PaiGowResult)},
  { 32, -1, sizeof(PaiGowSnapshot)},
  { 43, -1, sizeof(S2C_PG_AddPlayer)},
  { 49, -1, sizeof(C2S_PG_StartGame)},
  { 54, -1, sizeof(S2C_PG_StartGame)},
  { 60, -1, sizeof(C2S_PG_GrabBanker)},
  { 66, -1, sizeof(S2C_PG_GrabBanker)},
  { 73, -1, sizeof(S2C_PG_GrabBanker_RES)},
  { 80, -1, sizeof(C2S_PG_Bet)},
  { 86, -1, sizeof(S2C_PG_Bet)},
  { 93, -1, sizeof(S2C_PG_Deal)},
  { 99, -1, sizeof(C2S_PG_Collocation)},
  { 106, -1, sizeof(S2C_PG_Collocation)},
  { 115, -1, sizeof(S2C_PG_Result)},
  { 123, -1, sizeof(C2S_PG_Sure)},
  { 128, -1, sizeof(S2C_PG_Sure)},
  { 134, -1, sizeof(C2S_PG_Kick)},
  { 140, -1, sizeof(S2C_PG_Kick)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PaiGowConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PaiGowPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PaiGowResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PaiGowSnapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2C_PG_AddPlayer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_C2S_PG_StartGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2C_PG_StartGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_C2S_PG_GrabBanker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2C_PG_GrabBanker_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2C_PG_GrabBanker_RES_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_C2S_PG_Bet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2C_PG_Bet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2C_PG_Deal_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_C2S_PG_Collocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2C_PG_Collocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2C_PG_Result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_C2S_PG_Sure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2C_PG_Sure_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_C2S_PG_Kick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2C_PG_Kick_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "paigow.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 20);
}

}  // namespace

void TableStruct::Shutdown() {
  _PaiGowConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _PaiGowPlayer_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PaiGowResult_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _PaiGowSnapshot_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _S2C_PG_AddPlayer_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _C2S_PG_StartGame_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _S2C_PG_StartGame_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _C2S_PG_GrabBanker_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _S2C_PG_GrabBanker_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _S2C_PG_GrabBanker_RES_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _C2S_PG_Bet_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _S2C_PG_Bet_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _S2C_PG_Deal_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _C2S_PG_Collocation_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _S2C_PG_Collocation_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _S2C_PG_Result_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _C2S_PG_Sure_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _S2C_PG_Sure_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
  _C2S_PG_Kick_default_instance_.Shutdown();
  delete file_level_metadata[18].reflection;
  _S2C_PG_Kick_default_instance_.Shutdown();
  delete file_level_metadata[19].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto3_proto::protobuf_common_2eproto::InitDefaults();
  _PaiGowConfig_default_instance_.DefaultConstruct();
  _PaiGowPlayer_default_instance_.DefaultConstruct();
  _PaiGowResult_default_instance_.DefaultConstruct();
  _PaiGowSnapshot_default_instance_.DefaultConstruct();
  _S2C_PG_AddPlayer_default_instance_.DefaultConstruct();
  _C2S_PG_StartGame_default_instance_.DefaultConstruct();
  _S2C_PG_StartGame_default_instance_.DefaultConstruct();
  _C2S_PG_GrabBanker_default_instance_.DefaultConstruct();
  _S2C_PG_GrabBanker_default_instance_.DefaultConstruct();
  _S2C_PG_GrabBanker_RES_default_instance_.DefaultConstruct();
  _C2S_PG_Bet_default_instance_.DefaultConstruct();
  _S2C_PG_Bet_default_instance_.DefaultConstruct();
  _S2C_PG_Deal_default_instance_.DefaultConstruct();
  _C2S_PG_Collocation_default_instance_.DefaultConstruct();
  _S2C_PG_Collocation_default_instance_.DefaultConstruct();
  _S2C_PG_Result_default_instance_.DefaultConstruct();
  _C2S_PG_Sure_default_instance_.DefaultConstruct();
  _S2C_PG_Sure_default_instance_.DefaultConstruct();
  _C2S_PG_Kick_default_instance_.DefaultConstruct();
  _S2C_PG_Kick_default_instance_.DefaultConstruct();
  _PaiGowPlayer_default_instance_.get_mutable()->player_ = const_cast< ::proto3_proto::PlayerInfo*>(
      ::proto3_proto::PlayerInfo::internal_default_instance());
  _S2C_PG_AddPlayer_default_instance_.get_mutable()->player_ = const_cast< ::proto3_proto::PaiGowPlayer*>(
      ::proto3_proto::PaiGowPlayer::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014paigow.proto\022\014proto3_proto\032\014common.pro"
      "to\"\227\001\n\014PaiGowConfig\022\013\n\003pot\030\001 \001(\r\022\023\n\013bank"
      "er_type\030\002 \001(\r\022\025\n\ris_bet_always\030\003 \001(\010\022\024\n\014"
      "lock_bet_num\030\004 \001(\r\022\014\n\004type\030\005 \001(\r\022\021\n\thas_"
      "ghost\030\006 \001(\010\022\027\n\017has_heaven_nine\030\007 \001(\010\"\213\001\n"
      "\014PaiGowPlayer\022(\n\006player\030\001 \001(\0132\030.proto3_p"
      "roto.PlayerInfo\022\022\n\nhand_cards\030\002 \003(\r\022\016\n\006s"
      "tatus\030\003 \001(\r\022\017\n\007is_grab\030\004 \001(\010\022\r\n\005chips\030\005 "
      "\003(\r\022\r\n\005score\030\006 \001(\005\"Y\n\014PaiGowResult\022\017\n\007se"
      "at_id\030\001 \001(\r\022\016\n\006result\030\002 \001(\005\022\024\n\014total_res"
      "ult\030\003 \001(\005\022\022\n\nhand_cards\030\004 \003(\r\"\273\001\n\016PaiGow"
      "Snapshot\022\r\n\005state\030\001 \001(\r\022\022\n\nroom_owner\030\002 "
      "\001(\003\022\024\n\014public_cards\030\003 \003(\r\022+\n\007players\030\004 \003"
      "(\0132\032.proto3_proto.PaiGowPlayer\022+\n\007result"
      "s\030\005 \003(\0132\032.proto3_proto.PaiGowResult\022\026\n\016b"
      "anker_seat_id\030\006 \001(\r\">\n\020S2C_PG_AddPlayer\022"
      "*\n\006player\030\001 \001(\0132\032.proto3_proto.PaiGowPla"
      "yer\"\022\n\020C2S_PG_StartGame\"#\n\020S2C_PG_StartG"
      "ame\022\017\n\007is_grab\030\001 \001(\010\"$\n\021C2S_PG_GrabBanke"
      "r\022\017\n\007is_grab\030\001 \001(\010\"5\n\021S2C_PG_GrabBanker\022"
      "\017\n\007seat_id\030\001 \001(\r\022\017\n\007is_grab\030\002 \001(\010\"8\n\025S2C"
      "_PG_GrabBanker_RES\022\017\n\007seat_id\030\001 \001(\r\022\016\n\006i"
      "s_bet\030\002 \001(\010\"\033\n\nC2S_PG_Bet\022\r\n\005chips\030\001 \003(\r"
      "\",\n\nS2C_PG_Bet\022\017\n\007seat_id\030\001 \001(\r\022\r\n\005chips"
      "\030\002 \003(\r\"\036\n\013S2C_PG_Deal\022\017\n\007my_card\030\001 \003(\r\"0"
      "\n\022C2S_PG_Collocation\022\r\n\005first\030\001 \003(\r\022\013\n\003e"
      "nd\030\002 \003(\r\"[\n\022S2C_PG_Collocation\022\017\n\007seat_i"
      "d\030\001 \001(\r\022\023\n\013first_cards\030\002 \003(\r\022\021\n\tend_card"
      "s\030\003 \003(\r\022\014\n\004test\030\004 \001(\r\"a\n\rS2C_PG_Result\022*"
      "\n\006scores\030\001 \003(\0132\032.proto3_proto.PaiGowResu"
      "lt\022\024\n\014public_cards\030\002 \003(\r\022\016\n\006is_end\030\003 \001(\010"
      "\"\r\n\013C2S_PG_Sure\"\036\n\013S2C_PG_Sure\022\017\n\007seat_i"
      "d\030\001 \001(\r\"\036\n\013C2S_PG_Kick\022\017\n\007seat_id\030\001 \001(\r\""
      "\036\n\013S2C_PG_Kick\022\017\n\007seat_id\030\001 \001(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1359);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "paigow.proto", &protobuf_RegisterTypes);
  ::proto3_proto::protobuf_common_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_paigow_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PaiGowConfig::kPotFieldNumber;
const int PaiGowConfig::kBankerTypeFieldNumber;
const int PaiGowConfig::kIsBetAlwaysFieldNumber;
const int PaiGowConfig::kLockBetNumFieldNumber;
const int PaiGowConfig::kTypeFieldNumber;
const int PaiGowConfig::kHasGhostFieldNumber;
const int PaiGowConfig::kHasHeavenNineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PaiGowConfig::PaiGowConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.PaiGowConfig)
}
PaiGowConfig::PaiGowConfig(const PaiGowConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pot_, &from.pot_,
    reinterpret_cast<char*>(&has_heaven_nine_) -
    reinterpret_cast<char*>(&pot_) + sizeof(has_heaven_nine_));
  // @@protoc_insertion_point(copy_constructor:proto3_proto.PaiGowConfig)
}

void PaiGowConfig::SharedCtor() {
  ::memset(&pot_, 0, reinterpret_cast<char*>(&has_heaven_nine_) -
    reinterpret_cast<char*>(&pot_) + sizeof(has_heaven_nine_));
  _cached_size_ = 0;
}

PaiGowConfig::~PaiGowConfig() {
  // @@protoc_insertion_point(destructor:proto3_proto.PaiGowConfig)
  SharedDtor();
}

void PaiGowConfig::SharedDtor() {
}

void PaiGowConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PaiGowConfig::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PaiGowConfig& PaiGowConfig::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

PaiGowConfig* PaiGowConfig::New(::google::protobuf::Arena* arena) const {
  PaiGowConfig* n = new PaiGowConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PaiGowConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.PaiGowConfig)
  ::memset(&pot_, 0, reinterpret_cast<char*>(&has_heaven_nine_) -
    reinterpret_cast<char*>(&pot_) + sizeof(has_heaven_nine_));
}

bool PaiGowConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.PaiGowConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 pot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 banker_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_bet_always = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bet_always_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 lock_bet_num = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lock_bet_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_ghost = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_ghost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool has_heaven_nine = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_heaven_nine_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.PaiGowConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.PaiGowConfig)
  return false;
#undef DO_
}

void PaiGowConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.PaiGowConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pot = 1;
  if (this->pot() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pot(), output);
  }

  // uint32 banker_type = 2;
  if (this->banker_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->banker_type(), output);
  }

  // bool is_bet_always = 3;
  if (this->is_bet_always() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_bet_always(), output);
  }

  // uint32 lock_bet_num = 4;
  if (this->lock_bet_num() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->lock_bet_num(), output);
  }

  // uint32 type = 5;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->type(), output);
  }

  // bool has_ghost = 6;
  if (this->has_ghost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->has_ghost(), output);
  }

  // bool has_heaven_nine = 7;
  if (this->has_heaven_nine() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->has_heaven_nine(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.PaiGowConfig)
}

::google::protobuf::uint8* PaiGowConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.PaiGowConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pot = 1;
  if (this->pot() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pot(), target);
  }

  // uint32 banker_type = 2;
  if (this->banker_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->banker_type(), target);
  }

  // bool is_bet_always = 3;
  if (this->is_bet_always() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_bet_always(), target);
  }

  // uint32 lock_bet_num = 4;
  if (this->lock_bet_num() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->lock_bet_num(), target);
  }

  // uint32 type = 5;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->type(), target);
  }

  // bool has_ghost = 6;
  if (this->has_ghost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->has_ghost(), target);
  }

  // bool has_heaven_nine = 7;
  if (this->has_heaven_nine() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->has_heaven_nine(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.PaiGowConfig)
  return target;
}

size_t PaiGowConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.PaiGowConfig)
  size_t total_size = 0;

  // uint32 pot = 1;
  if (this->pot() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pot());
  }

  // uint32 banker_type = 2;
  if (this->banker_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->banker_type());
  }

  // uint32 lock_bet_num = 4;
  if (this->lock_bet_num() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->lock_bet_num());
  }

  // uint32 type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->type());
  }

  // bool is_bet_always = 3;
  if (this->is_bet_always() != 0) {
    total_size += 1 + 1;
  }

  // bool has_ghost = 6;
  if (this->has_ghost() != 0) {
    total_size += 1 + 1;
  }

  // bool has_heaven_nine = 7;
  if (this->has_heaven_nine() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaiGowConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.PaiGowConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PaiGowConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PaiGowConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.PaiGowConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.PaiGowConfig)
    MergeFrom(*source);
  }
}

void PaiGowConfig::MergeFrom(const PaiGowConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.PaiGowConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pot() != 0) {
    set_pot(from.pot());
  }
  if (from.banker_type() != 0) {
    set_banker_type(from.banker_type());
  }
  if (from.lock_bet_num() != 0) {
    set_lock_bet_num(from.lock_bet_num());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.is_bet_always() != 0) {
    set_is_bet_always(from.is_bet_always());
  }
  if (from.has_ghost() != 0) {
    set_has_ghost(from.has_ghost());
  }
  if (from.has_heaven_nine() != 0) {
    set_has_heaven_nine(from.has_heaven_nine());
  }
}

void PaiGowConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.PaiGowConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaiGowConfig::CopyFrom(const PaiGowConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.PaiGowConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaiGowConfig::IsInitialized() const {
  return true;
}

void PaiGowConfig::Swap(PaiGowConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PaiGowConfig::InternalSwap(PaiGowConfig* other) {
  std::swap(pot_, other->pot_);
  std::swap(banker_type_, other->banker_type_);
  std::swap(lock_bet_num_, other->lock_bet_num_);
  std::swap(type_, other->type_);
  std::swap(is_bet_always_, other->is_bet_always_);
  std::swap(has_ghost_, other->has_ghost_);
  std::swap(has_heaven_nine_, other->has_heaven_nine_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PaiGowConfig::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PaiGowConfig

// uint32 pot = 1;
void PaiGowConfig::clear_pot() {
  pot_ = 0u;
}
::google::protobuf::uint32 PaiGowConfig::pot() const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowConfig.pot)
  return pot_;
}
void PaiGowConfig::set_pot(::google::protobuf::uint32 value) {
  
  pot_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowConfig.pot)
}

// uint32 banker_type = 2;
void PaiGowConfig::clear_banker_type() {
  banker_type_ = 0u;
}
::google::protobuf::uint32 PaiGowConfig::banker_type() const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowConfig.banker_type)
  return banker_type_;
}
void PaiGowConfig::set_banker_type(::google::protobuf::uint32 value) {
  
  banker_type_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowConfig.banker_type)
}

// bool is_bet_always = 3;
void PaiGowConfig::clear_is_bet_always() {
  is_bet_always_ = false;
}
bool PaiGowConfig::is_bet_always() const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowConfig.is_bet_always)
  return is_bet_always_;
}
void PaiGowConfig::set_is_bet_always(bool value) {
  
  is_bet_always_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowConfig.is_bet_always)
}

// uint32 lock_bet_num = 4;
void PaiGowConfig::clear_lock_bet_num() {
  lock_bet_num_ = 0u;
}
::google::protobuf::uint32 PaiGowConfig::lock_bet_num() const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowConfig.lock_bet_num)
  return lock_bet_num_;
}
void PaiGowConfig::set_lock_bet_num(::google::protobuf::uint32 value) {
  
  lock_bet_num_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowConfig.lock_bet_num)
}

// uint32 type = 5;
void PaiGowConfig::clear_type() {
  type_ = 0u;
}
::google::protobuf::uint32 PaiGowConfig::type() const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowConfig.type)
  return type_;
}
void PaiGowConfig::set_type(::google::protobuf::uint32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowConfig.type)
}

// bool has_ghost = 6;
void PaiGowConfig::clear_has_ghost() {
  has_ghost_ = false;
}
bool PaiGowConfig::has_ghost() const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowConfig.has_ghost)
  return has_ghost_;
}
void PaiGowConfig::set_has_ghost(bool value) {
  
  has_ghost_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowConfig.has_ghost)
}

// bool has_heaven_nine = 7;
void PaiGowConfig::clear_has_heaven_nine() {
  has_heaven_nine_ = false;
}
bool PaiGowConfig::has_heaven_nine() const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowConfig.has_heaven_nine)
  return has_heaven_nine_;
}
void PaiGowConfig::set_has_heaven_nine(bool value) {
  
  has_heaven_nine_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowConfig.has_heaven_nine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PaiGowPlayer::kPlayerFieldNumber;
const int PaiGowPlayer::kHandCardsFieldNumber;
const int PaiGowPlayer::kStatusFieldNumber;
const int PaiGowPlayer::kIsGrabFieldNumber;
const int PaiGowPlayer::kChipsFieldNumber;
const int PaiGowPlayer::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PaiGowPlayer::PaiGowPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.PaiGowPlayer)
}
PaiGowPlayer::PaiGowPlayer(const PaiGowPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hand_cards_(from.hand_cards_),
      chips_(from.chips_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::proto3_proto::PlayerInfo(*from.player_);
  } else {
    player_ = NULL;
  }
  ::memcpy(&status_, &from.status_,
    reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&status_) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:proto3_proto.PaiGowPlayer)
}

void PaiGowPlayer::SharedCtor() {
  ::memset(&player_, 0, reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&player_) + sizeof(score_));
  _cached_size_ = 0;
}

PaiGowPlayer::~PaiGowPlayer() {
  // @@protoc_insertion_point(destructor:proto3_proto.PaiGowPlayer)
  SharedDtor();
}

void PaiGowPlayer::SharedDtor() {
  if (this != internal_default_instance()) {
    delete player_;
  }
}

void PaiGowPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PaiGowPlayer::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PaiGowPlayer& PaiGowPlayer::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

PaiGowPlayer* PaiGowPlayer::New(::google::protobuf::Arena* arena) const {
  PaiGowPlayer* n = new PaiGowPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PaiGowPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.PaiGowPlayer)
  hand_cards_.Clear();
  chips_.Clear();
  if (GetArenaNoVirtual() == NULL && player_ != NULL) {
    delete player_;
  }
  player_ = NULL;
  ::memset(&status_, 0, reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&status_) + sizeof(score_));
}

bool PaiGowPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.PaiGowPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto3_proto.PlayerInfo player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 hand_cards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_hand_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_grab = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_grab_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 chips = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chips())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(40u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_chips())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 score = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.PaiGowPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.PaiGowPlayer)
  return false;
#undef DO_
}

void PaiGowPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.PaiGowPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto3_proto.PlayerInfo player = 1;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_, output);
  }

  // repeated uint32 hand_cards = 2;
  if (this->hand_cards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_hand_cards_cached_byte_size_);
  }
  for (int i = 0, n = this->hand_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->hand_cards(i), output);
  }

  // uint32 status = 3;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  // bool is_grab = 4;
  if (this->is_grab() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_grab(), output);
  }

  // repeated uint32 chips = 5;
  if (this->chips_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_chips_cached_byte_size_);
  }
  for (int i = 0, n = this->chips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->chips(i), output);
  }

  // int32 score = 6;
  if (this->score() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->score(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.PaiGowPlayer)
}

::google::protobuf::uint8* PaiGowPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.PaiGowPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto3_proto.PlayerInfo player = 1;
  if (this->has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_, deterministic, target);
  }

  // repeated uint32 hand_cards = 2;
  if (this->hand_cards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _hand_cards_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->hand_cards_, target);
  }

  // uint32 status = 3;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  // bool is_grab = 4;
  if (this->is_grab() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_grab(), target);
  }

  // repeated uint32 chips = 5;
  if (this->chips_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _chips_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->chips_, target);
  }

  // int32 score = 6;
  if (this->score() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->score(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.PaiGowPlayer)
  return target;
}

size_t PaiGowPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.PaiGowPlayer)
  size_t total_size = 0;

  // repeated uint32 hand_cards = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->hand_cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hand_cards_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 chips = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->chips_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _chips_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .proto3_proto.PlayerInfo player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }

  // uint32 status = 3;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  // bool is_grab = 4;
  if (this->is_grab() != 0) {
    total_size += 1 + 1;
  }

  // int32 score = 6;
  if (this->score() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaiGowPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.PaiGowPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const PaiGowPlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PaiGowPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.PaiGowPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.PaiGowPlayer)
    MergeFrom(*source);
  }
}

void PaiGowPlayer::MergeFrom(const PaiGowPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.PaiGowPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hand_cards_.MergeFrom(from.hand_cards_);
  chips_.MergeFrom(from.chips_);
  if (from.has_player()) {
    mutable_player()->::proto3_proto::PlayerInfo::MergeFrom(from.player());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.is_grab() != 0) {
    set_is_grab(from.is_grab());
  }
  if (from.score() != 0) {
    set_score(from.score());
  }
}

void PaiGowPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.PaiGowPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaiGowPlayer::CopyFrom(const PaiGowPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.PaiGowPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaiGowPlayer::IsInitialized() const {
  return true;
}

void PaiGowPlayer::Swap(PaiGowPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PaiGowPlayer::InternalSwap(PaiGowPlayer* other) {
  hand_cards_.InternalSwap(&other->hand_cards_);
  chips_.InternalSwap(&other->chips_);
  std::swap(player_, other->player_);
  std::swap(status_, other->status_);
  std::swap(is_grab_, other->is_grab_);
  std::swap(score_, other->score_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PaiGowPlayer::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PaiGowPlayer

// .proto3_proto.PlayerInfo player = 1;
bool PaiGowPlayer::has_player() const {
  return this != internal_default_instance() && player_ != NULL;
}
void PaiGowPlayer::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
const ::proto3_proto::PlayerInfo& PaiGowPlayer::player() const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowPlayer.player)
  return player_ != NULL ? *player_
                         : *::proto3_proto::PlayerInfo::internal_default_instance();
}
::proto3_proto::PlayerInfo* PaiGowPlayer::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::proto3_proto::PlayerInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3_proto.PaiGowPlayer.player)
  return player_;
}
::proto3_proto::PlayerInfo* PaiGowPlayer::release_player() {
  // @@protoc_insertion_point(field_release:proto3_proto.PaiGowPlayer.player)
  
  ::proto3_proto::PlayerInfo* temp = player_;
  player_ = NULL;
  return temp;
}
void PaiGowPlayer::set_allocated_player(::proto3_proto::PlayerInfo* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3_proto.PaiGowPlayer.player)
}

// repeated uint32 hand_cards = 2;
int PaiGowPlayer::hand_cards_size() const {
  return hand_cards_.size();
}
void PaiGowPlayer::clear_hand_cards() {
  hand_cards_.Clear();
}
::google::protobuf::uint32 PaiGowPlayer::hand_cards(int index) const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowPlayer.hand_cards)
  return hand_cards_.Get(index);
}
void PaiGowPlayer::set_hand_cards(int index, ::google::protobuf::uint32 value) {
  hand_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowPlayer.hand_cards)
}
void PaiGowPlayer::add_hand_cards(::google::protobuf::uint32 value) {
  hand_cards_.Add(value);
  // @@protoc_insertion_point(field_add:proto3_proto.PaiGowPlayer.hand_cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PaiGowPlayer::hand_cards() const {
  // @@protoc_insertion_point(field_list:proto3_proto.PaiGowPlayer.hand_cards)
  return hand_cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PaiGowPlayer::mutable_hand_cards() {
  // @@protoc_insertion_point(field_mutable_list:proto3_proto.PaiGowPlayer.hand_cards)
  return &hand_cards_;
}

// uint32 status = 3;
void PaiGowPlayer::clear_status() {
  status_ = 0u;
}
::google::protobuf::uint32 PaiGowPlayer::status() const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowPlayer.status)
  return status_;
}
void PaiGowPlayer::set_status(::google::protobuf::uint32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowPlayer.status)
}

// bool is_grab = 4;
void PaiGowPlayer::clear_is_grab() {
  is_grab_ = false;
}
bool PaiGowPlayer::is_grab() const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowPlayer.is_grab)
  return is_grab_;
}
void PaiGowPlayer::set_is_grab(bool value) {
  
  is_grab_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowPlayer.is_grab)
}

// repeated uint32 chips = 5;
int PaiGowPlayer::chips_size() const {
  return chips_.size();
}
void PaiGowPlayer::clear_chips() {
  chips_.Clear();
}
::google::protobuf::uint32 PaiGowPlayer::chips(int index) const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowPlayer.chips)
  return chips_.Get(index);
}
void PaiGowPlayer::set_chips(int index, ::google::protobuf::uint32 value) {
  chips_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowPlayer.chips)
}
void PaiGowPlayer::add_chips(::google::protobuf::uint32 value) {
  chips_.Add(value);
  // @@protoc_insertion_point(field_add:proto3_proto.PaiGowPlayer.chips)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PaiGowPlayer::chips() const {
  // @@protoc_insertion_point(field_list:proto3_proto.PaiGowPlayer.chips)
  return chips_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PaiGowPlayer::mutable_chips() {
  // @@protoc_insertion_point(field_mutable_list:proto3_proto.PaiGowPlayer.chips)
  return &chips_;
}

// int32 score = 6;
void PaiGowPlayer::clear_score() {
  score_ = 0;
}
::google::protobuf::int32 PaiGowPlayer::score() const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowPlayer.score)
  return score_;
}
void PaiGowPlayer::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowPlayer.score)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PaiGowResult::kSeatIdFieldNumber;
const int PaiGowResult::kResultFieldNumber;
const int PaiGowResult::kTotalResultFieldNumber;
const int PaiGowResult::kHandCardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PaiGowResult::PaiGowResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.PaiGowResult)
}
PaiGowResult::PaiGowResult(const PaiGowResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      hand_cards_(from.hand_cards_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seat_id_, &from.seat_id_,
    reinterpret_cast<char*>(&total_result_) -
    reinterpret_cast<char*>(&seat_id_) + sizeof(total_result_));
  // @@protoc_insertion_point(copy_constructor:proto3_proto.PaiGowResult)
}

void PaiGowResult::SharedCtor() {
  ::memset(&seat_id_, 0, reinterpret_cast<char*>(&total_result_) -
    reinterpret_cast<char*>(&seat_id_) + sizeof(total_result_));
  _cached_size_ = 0;
}

PaiGowResult::~PaiGowResult() {
  // @@protoc_insertion_point(destructor:proto3_proto.PaiGowResult)
  SharedDtor();
}

void PaiGowResult::SharedDtor() {
}

void PaiGowResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PaiGowResult::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PaiGowResult& PaiGowResult::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

PaiGowResult* PaiGowResult::New(::google::protobuf::Arena* arena) const {
  PaiGowResult* n = new PaiGowResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PaiGowResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.PaiGowResult)
  hand_cards_.Clear();
  ::memset(&seat_id_, 0, reinterpret_cast<char*>(&total_result_) -
    reinterpret_cast<char*>(&seat_id_) + sizeof(total_result_));
}

bool PaiGowResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.PaiGowResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 seat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 result = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 total_result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 hand_cards = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_hand_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(32u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 34u, input, this->mutable_hand_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.PaiGowResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.PaiGowResult)
  return false;
#undef DO_
}

void PaiGowResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.PaiGowResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result(), output);
  }

  // int32 total_result = 3;
  if (this->total_result() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->total_result(), output);
  }

  // repeated uint32 hand_cards = 4;
  if (this->hand_cards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_hand_cards_cached_byte_size_);
  }
  for (int i = 0, n = this->hand_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->hand_cards(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.PaiGowResult)
}

::google::protobuf::uint8* PaiGowResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.PaiGowResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // int32 result = 2;
  if (this->result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result(), target);
  }

  // int32 total_result = 3;
  if (this->total_result() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->total_result(), target);
  }

  // repeated uint32 hand_cards = 4;
  if (this->hand_cards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _hand_cards_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->hand_cards_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.PaiGowResult)
  return target;
}

size_t PaiGowResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.PaiGowResult)
  size_t total_size = 0;

  // repeated uint32 hand_cards = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->hand_cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _hand_cards_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seat_id());
  }

  // int32 result = 2;
  if (this->result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->result());
  }

  // int32 total_result = 3;
  if (this->total_result() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->total_result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaiGowResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.PaiGowResult)
  GOOGLE_DCHECK_NE(&from, this);
  const PaiGowResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PaiGowResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.PaiGowResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.PaiGowResult)
    MergeFrom(*source);
  }
}

void PaiGowResult::MergeFrom(const PaiGowResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.PaiGowResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  hand_cards_.MergeFrom(from.hand_cards_);
  if (from.seat_id() != 0) {
    set_seat_id(from.seat_id());
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
  if (from.total_result() != 0) {
    set_total_result(from.total_result());
  }
}

void PaiGowResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.PaiGowResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaiGowResult::CopyFrom(const PaiGowResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.PaiGowResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaiGowResult::IsInitialized() const {
  return true;
}

void PaiGowResult::Swap(PaiGowResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PaiGowResult::InternalSwap(PaiGowResult* other) {
  hand_cards_.InternalSwap(&other->hand_cards_);
  std::swap(seat_id_, other->seat_id_);
  std::swap(result_, other->result_);
  std::swap(total_result_, other->total_result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PaiGowResult::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PaiGowResult

// uint32 seat_id = 1;
void PaiGowResult::clear_seat_id() {
  seat_id_ = 0u;
}
::google::protobuf::uint32 PaiGowResult::seat_id() const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowResult.seat_id)
  return seat_id_;
}
void PaiGowResult::set_seat_id(::google::protobuf::uint32 value) {
  
  seat_id_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowResult.seat_id)
}

// int32 result = 2;
void PaiGowResult::clear_result() {
  result_ = 0;
}
::google::protobuf::int32 PaiGowResult::result() const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowResult.result)
  return result_;
}
void PaiGowResult::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowResult.result)
}

// int32 total_result = 3;
void PaiGowResult::clear_total_result() {
  total_result_ = 0;
}
::google::protobuf::int32 PaiGowResult::total_result() const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowResult.total_result)
  return total_result_;
}
void PaiGowResult::set_total_result(::google::protobuf::int32 value) {
  
  total_result_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowResult.total_result)
}

// repeated uint32 hand_cards = 4;
int PaiGowResult::hand_cards_size() const {
  return hand_cards_.size();
}
void PaiGowResult::clear_hand_cards() {
  hand_cards_.Clear();
}
::google::protobuf::uint32 PaiGowResult::hand_cards(int index) const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowResult.hand_cards)
  return hand_cards_.Get(index);
}
void PaiGowResult::set_hand_cards(int index, ::google::protobuf::uint32 value) {
  hand_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowResult.hand_cards)
}
void PaiGowResult::add_hand_cards(::google::protobuf::uint32 value) {
  hand_cards_.Add(value);
  // @@protoc_insertion_point(field_add:proto3_proto.PaiGowResult.hand_cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PaiGowResult::hand_cards() const {
  // @@protoc_insertion_point(field_list:proto3_proto.PaiGowResult.hand_cards)
  return hand_cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PaiGowResult::mutable_hand_cards() {
  // @@protoc_insertion_point(field_mutable_list:proto3_proto.PaiGowResult.hand_cards)
  return &hand_cards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PaiGowSnapshot::kStateFieldNumber;
const int PaiGowSnapshot::kRoomOwnerFieldNumber;
const int PaiGowSnapshot::kPublicCardsFieldNumber;
const int PaiGowSnapshot::kPlayersFieldNumber;
const int PaiGowSnapshot::kResultsFieldNumber;
const int PaiGowSnapshot::kBankerSeatIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PaiGowSnapshot::PaiGowSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.PaiGowSnapshot)
}
PaiGowSnapshot::PaiGowSnapshot(const PaiGowSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      public_cards_(from.public_cards_),
      players_(from.players_),
      results_(from.results_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&room_owner_, &from.room_owner_,
    reinterpret_cast<char*>(&banker_seat_id_) -
    reinterpret_cast<char*>(&room_owner_) + sizeof(banker_seat_id_));
  // @@protoc_insertion_point(copy_constructor:proto3_proto.PaiGowSnapshot)
}

void PaiGowSnapshot::SharedCtor() {
  ::memset(&room_owner_, 0, reinterpret_cast<char*>(&banker_seat_id_) -
    reinterpret_cast<char*>(&room_owner_) + sizeof(banker_seat_id_));
  _cached_size_ = 0;
}

PaiGowSnapshot::~PaiGowSnapshot() {
  // @@protoc_insertion_point(destructor:proto3_proto.PaiGowSnapshot)
  SharedDtor();
}

void PaiGowSnapshot::SharedDtor() {
}

void PaiGowSnapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PaiGowSnapshot::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PaiGowSnapshot& PaiGowSnapshot::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

PaiGowSnapshot* PaiGowSnapshot::New(::google::protobuf::Arena* arena) const {
  PaiGowSnapshot* n = new PaiGowSnapshot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PaiGowSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.PaiGowSnapshot)
  public_cards_.Clear();
  players_.Clear();
  results_.Clear();
  ::memset(&room_owner_, 0, reinterpret_cast<char*>(&banker_seat_id_) -
    reinterpret_cast<char*>(&room_owner_) + sizeof(banker_seat_id_));
}

bool PaiGowSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.PaiGowSnapshot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 state = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 room_owner = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &room_owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 public_cards = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_public_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_public_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto3_proto.PaiGowPlayer players = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto3_proto.PaiGowResult results = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 banker_seat_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &banker_seat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.PaiGowSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.PaiGowSnapshot)
  return false;
#undef DO_
}

void PaiGowSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.PaiGowSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->state(), output);
  }

  // int64 room_owner = 2;
  if (this->room_owner() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->room_owner(), output);
  }

  // repeated uint32 public_cards = 3;
  if (this->public_cards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_public_cards_cached_byte_size_);
  }
  for (int i = 0, n = this->public_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->public_cards(i), output);
  }

  // repeated .proto3_proto.PaiGowPlayer players = 4;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->players(i), output);
  }

  // repeated .proto3_proto.PaiGowResult results = 5;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->results(i), output);
  }

  // uint32 banker_seat_id = 6;
  if (this->banker_seat_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->banker_seat_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.PaiGowSnapshot)
}

::google::protobuf::uint8* PaiGowSnapshot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.PaiGowSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->state(), target);
  }

  // int64 room_owner = 2;
  if (this->room_owner() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->room_owner(), target);
  }

  // repeated uint32 public_cards = 3;
  if (this->public_cards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _public_cards_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->public_cards_, target);
  }

  // repeated .proto3_proto.PaiGowPlayer players = 4;
  for (unsigned int i = 0, n = this->players_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->players(i), deterministic, target);
  }

  // repeated .proto3_proto.PaiGowResult results = 5;
  for (unsigned int i = 0, n = this->results_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->results(i), deterministic, target);
  }

  // uint32 banker_seat_id = 6;
  if (this->banker_seat_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->banker_seat_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.PaiGowSnapshot)
  return target;
}

size_t PaiGowSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.PaiGowSnapshot)
  size_t total_size = 0;

  // repeated uint32 public_cards = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->public_cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _public_cards_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .proto3_proto.PaiGowPlayer players = 4;
  {
    unsigned int count = this->players_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->players(i));
    }
  }

  // repeated .proto3_proto.PaiGowResult results = 5;
  {
    unsigned int count = this->results_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->results(i));
    }
  }

  // int64 room_owner = 2;
  if (this->room_owner() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->room_owner());
  }

  // uint32 state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->state());
  }

  // uint32 banker_seat_id = 6;
  if (this->banker_seat_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->banker_seat_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaiGowSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.PaiGowSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const PaiGowSnapshot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PaiGowSnapshot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.PaiGowSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.PaiGowSnapshot)
    MergeFrom(*source);
  }
}

void PaiGowSnapshot::MergeFrom(const PaiGowSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.PaiGowSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  public_cards_.MergeFrom(from.public_cards_);
  players_.MergeFrom(from.players_);
  results_.MergeFrom(from.results_);
  if (from.room_owner() != 0) {
    set_room_owner(from.room_owner());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.banker_seat_id() != 0) {
    set_banker_seat_id(from.banker_seat_id());
  }
}

void PaiGowSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.PaiGowSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaiGowSnapshot::CopyFrom(const PaiGowSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.PaiGowSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaiGowSnapshot::IsInitialized() const {
  return true;
}

void PaiGowSnapshot::Swap(PaiGowSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PaiGowSnapshot::InternalSwap(PaiGowSnapshot* other) {
  public_cards_.InternalSwap(&other->public_cards_);
  players_.InternalSwap(&other->players_);
  results_.InternalSwap(&other->results_);
  std::swap(room_owner_, other->room_owner_);
  std::swap(state_, other->state_);
  std::swap(banker_seat_id_, other->banker_seat_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PaiGowSnapshot::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PaiGowSnapshot

// uint32 state = 1;
void PaiGowSnapshot::clear_state() {
  state_ = 0u;
}
::google::protobuf::uint32 PaiGowSnapshot::state() const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowSnapshot.state)
  return state_;
}
void PaiGowSnapshot::set_state(::google::protobuf::uint32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowSnapshot.state)
}

// int64 room_owner = 2;
void PaiGowSnapshot::clear_room_owner() {
  room_owner_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 PaiGowSnapshot::room_owner() const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowSnapshot.room_owner)
  return room_owner_;
}
void PaiGowSnapshot::set_room_owner(::google::protobuf::int64 value) {
  
  room_owner_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowSnapshot.room_owner)
}

// repeated uint32 public_cards = 3;
int PaiGowSnapshot::public_cards_size() const {
  return public_cards_.size();
}
void PaiGowSnapshot::clear_public_cards() {
  public_cards_.Clear();
}
::google::protobuf::uint32 PaiGowSnapshot::public_cards(int index) const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowSnapshot.public_cards)
  return public_cards_.Get(index);
}
void PaiGowSnapshot::set_public_cards(int index, ::google::protobuf::uint32 value) {
  public_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowSnapshot.public_cards)
}
void PaiGowSnapshot::add_public_cards(::google::protobuf::uint32 value) {
  public_cards_.Add(value);
  // @@protoc_insertion_point(field_add:proto3_proto.PaiGowSnapshot.public_cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PaiGowSnapshot::public_cards() const {
  // @@protoc_insertion_point(field_list:proto3_proto.PaiGowSnapshot.public_cards)
  return public_cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PaiGowSnapshot::mutable_public_cards() {
  // @@protoc_insertion_point(field_mutable_list:proto3_proto.PaiGowSnapshot.public_cards)
  return &public_cards_;
}

// repeated .proto3_proto.PaiGowPlayer players = 4;
int PaiGowSnapshot::players_size() const {
  return players_.size();
}
void PaiGowSnapshot::clear_players() {
  players_.Clear();
}
const ::proto3_proto::PaiGowPlayer& PaiGowSnapshot::players(int index) const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowSnapshot.players)
  return players_.Get(index);
}
::proto3_proto::PaiGowPlayer* PaiGowSnapshot::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto3_proto.PaiGowSnapshot.players)
  return players_.Mutable(index);
}
::proto3_proto::PaiGowPlayer* PaiGowSnapshot::add_players() {
  // @@protoc_insertion_point(field_add:proto3_proto.PaiGowSnapshot.players)
  return players_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3_proto::PaiGowPlayer >*
PaiGowSnapshot::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto3_proto.PaiGowSnapshot.players)
  return &players_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3_proto::PaiGowPlayer >&
PaiGowSnapshot::players() const {
  // @@protoc_insertion_point(field_list:proto3_proto.PaiGowSnapshot.players)
  return players_;
}

// repeated .proto3_proto.PaiGowResult results = 5;
int PaiGowSnapshot::results_size() const {
  return results_.size();
}
void PaiGowSnapshot::clear_results() {
  results_.Clear();
}
const ::proto3_proto::PaiGowResult& PaiGowSnapshot::results(int index) const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowSnapshot.results)
  return results_.Get(index);
}
::proto3_proto::PaiGowResult* PaiGowSnapshot::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:proto3_proto.PaiGowSnapshot.results)
  return results_.Mutable(index);
}
::proto3_proto::PaiGowResult* PaiGowSnapshot::add_results() {
  // @@protoc_insertion_point(field_add:proto3_proto.PaiGowSnapshot.results)
  return results_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3_proto::PaiGowResult >*
PaiGowSnapshot::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:proto3_proto.PaiGowSnapshot.results)
  return &results_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3_proto::PaiGowResult >&
PaiGowSnapshot::results() const {
  // @@protoc_insertion_point(field_list:proto3_proto.PaiGowSnapshot.results)
  return results_;
}

// uint32 banker_seat_id = 6;
void PaiGowSnapshot::clear_banker_seat_id() {
  banker_seat_id_ = 0u;
}
::google::protobuf::uint32 PaiGowSnapshot::banker_seat_id() const {
  // @@protoc_insertion_point(field_get:proto3_proto.PaiGowSnapshot.banker_seat_id)
  return banker_seat_id_;
}
void PaiGowSnapshot::set_banker_seat_id(::google::protobuf::uint32 value) {
  
  banker_seat_id_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.PaiGowSnapshot.banker_seat_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2C_PG_AddPlayer::kPlayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2C_PG_AddPlayer::S2C_PG_AddPlayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.S2C_PG_AddPlayer)
}
S2C_PG_AddPlayer::S2C_PG_AddPlayer(const S2C_PG_AddPlayer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_player()) {
    player_ = new ::proto3_proto::PaiGowPlayer(*from.player_);
  } else {
    player_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto3_proto.S2C_PG_AddPlayer)
}

void S2C_PG_AddPlayer::SharedCtor() {
  player_ = NULL;
  _cached_size_ = 0;
}

S2C_PG_AddPlayer::~S2C_PG_AddPlayer() {
  // @@protoc_insertion_point(destructor:proto3_proto.S2C_PG_AddPlayer)
  SharedDtor();
}

void S2C_PG_AddPlayer::SharedDtor() {
  if (this != internal_default_instance()) {
    delete player_;
  }
}

void S2C_PG_AddPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_PG_AddPlayer::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2C_PG_AddPlayer& S2C_PG_AddPlayer::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2C_PG_AddPlayer* S2C_PG_AddPlayer::New(::google::protobuf::Arena* arena) const {
  S2C_PG_AddPlayer* n = new S2C_PG_AddPlayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2C_PG_AddPlayer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.S2C_PG_AddPlayer)
  if (GetArenaNoVirtual() == NULL && player_ != NULL) {
    delete player_;
  }
  player_ = NULL;
}

bool S2C_PG_AddPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.S2C_PG_AddPlayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto3_proto.PaiGowPlayer player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.S2C_PG_AddPlayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.S2C_PG_AddPlayer)
  return false;
#undef DO_
}

void S2C_PG_AddPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.S2C_PG_AddPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto3_proto.PaiGowPlayer player = 1;
  if (this->has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->player_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.S2C_PG_AddPlayer)
}

::google::protobuf::uint8* S2C_PG_AddPlayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.S2C_PG_AddPlayer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto3_proto.PaiGowPlayer player = 1;
  if (this->has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->player_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.S2C_PG_AddPlayer)
  return target;
}

size_t S2C_PG_AddPlayer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.S2C_PG_AddPlayer)
  size_t total_size = 0;

  // .proto3_proto.PaiGowPlayer player = 1;
  if (this->has_player()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->player_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_PG_AddPlayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.S2C_PG_AddPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_PG_AddPlayer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2C_PG_AddPlayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.S2C_PG_AddPlayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.S2C_PG_AddPlayer)
    MergeFrom(*source);
  }
}

void S2C_PG_AddPlayer::MergeFrom(const S2C_PG_AddPlayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.S2C_PG_AddPlayer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player()) {
    mutable_player()->::proto3_proto::PaiGowPlayer::MergeFrom(from.player());
  }
}

void S2C_PG_AddPlayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.S2C_PG_AddPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_PG_AddPlayer::CopyFrom(const S2C_PG_AddPlayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.S2C_PG_AddPlayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_PG_AddPlayer::IsInitialized() const {
  return true;
}

void S2C_PG_AddPlayer::Swap(S2C_PG_AddPlayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2C_PG_AddPlayer::InternalSwap(S2C_PG_AddPlayer* other) {
  std::swap(player_, other->player_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2C_PG_AddPlayer::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2C_PG_AddPlayer

// .proto3_proto.PaiGowPlayer player = 1;
bool S2C_PG_AddPlayer::has_player() const {
  return this != internal_default_instance() && player_ != NULL;
}
void S2C_PG_AddPlayer::clear_player() {
  if (GetArenaNoVirtual() == NULL && player_ != NULL) delete player_;
  player_ = NULL;
}
const ::proto3_proto::PaiGowPlayer& S2C_PG_AddPlayer::player() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_PG_AddPlayer.player)
  return player_ != NULL ? *player_
                         : *::proto3_proto::PaiGowPlayer::internal_default_instance();
}
::proto3_proto::PaiGowPlayer* S2C_PG_AddPlayer::mutable_player() {
  
  if (player_ == NULL) {
    player_ = new ::proto3_proto::PaiGowPlayer;
  }
  // @@protoc_insertion_point(field_mutable:proto3_proto.S2C_PG_AddPlayer.player)
  return player_;
}
::proto3_proto::PaiGowPlayer* S2C_PG_AddPlayer::release_player() {
  // @@protoc_insertion_point(field_release:proto3_proto.S2C_PG_AddPlayer.player)
  
  ::proto3_proto::PaiGowPlayer* temp = player_;
  player_ = NULL;
  return temp;
}
void S2C_PG_AddPlayer::set_allocated_player(::proto3_proto::PaiGowPlayer* player) {
  delete player_;
  player_ = player;
  if (player) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3_proto.S2C_PG_AddPlayer.player)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2S_PG_StartGame::C2S_PG_StartGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.C2S_PG_StartGame)
}
C2S_PG_StartGame::C2S_PG_StartGame(const C2S_PG_StartGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto3_proto.C2S_PG_StartGame)
}

void C2S_PG_StartGame::SharedCtor() {
  _cached_size_ = 0;
}

C2S_PG_StartGame::~C2S_PG_StartGame() {
  // @@protoc_insertion_point(destructor:proto3_proto.C2S_PG_StartGame)
  SharedDtor();
}

void C2S_PG_StartGame::SharedDtor() {
}

void C2S_PG_StartGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_PG_StartGame::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2S_PG_StartGame& C2S_PG_StartGame::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

C2S_PG_StartGame* C2S_PG_StartGame::New(::google::protobuf::Arena* arena) const {
  C2S_PG_StartGame* n = new C2S_PG_StartGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2S_PG_StartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.C2S_PG_StartGame)
}

bool C2S_PG_StartGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.C2S_PG_StartGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.C2S_PG_StartGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.C2S_PG_StartGame)
  return false;
#undef DO_
}

void C2S_PG_StartGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.C2S_PG_StartGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:proto3_proto.C2S_PG_StartGame)
}

::google::protobuf::uint8* C2S_PG_StartGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.C2S_PG_StartGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.C2S_PG_StartGame)
  return target;
}

size_t C2S_PG_StartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.C2S_PG_StartGame)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_PG_StartGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.C2S_PG_StartGame)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_PG_StartGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2S_PG_StartGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.C2S_PG_StartGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.C2S_PG_StartGame)
    MergeFrom(*source);
  }
}

void C2S_PG_StartGame::MergeFrom(const C2S_PG_StartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.C2S_PG_StartGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void C2S_PG_StartGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.C2S_PG_StartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_PG_StartGame::CopyFrom(const C2S_PG_StartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.C2S_PG_StartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_PG_StartGame::IsInitialized() const {
  return true;
}

void C2S_PG_StartGame::Swap(C2S_PG_StartGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2S_PG_StartGame::InternalSwap(C2S_PG_StartGame* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2S_PG_StartGame::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2S_PG_StartGame

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2C_PG_StartGame::kIsGrabFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2C_PG_StartGame::S2C_PG_StartGame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.S2C_PG_StartGame)
}
S2C_PG_StartGame::S2C_PG_StartGame(const S2C_PG_StartGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_grab_ = from.is_grab_;
  // @@protoc_insertion_point(copy_constructor:proto3_proto.S2C_PG_StartGame)
}

void S2C_PG_StartGame::SharedCtor() {
  is_grab_ = false;
  _cached_size_ = 0;
}

S2C_PG_StartGame::~S2C_PG_StartGame() {
  // @@protoc_insertion_point(destructor:proto3_proto.S2C_PG_StartGame)
  SharedDtor();
}

void S2C_PG_StartGame::SharedDtor() {
}

void S2C_PG_StartGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_PG_StartGame::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2C_PG_StartGame& S2C_PG_StartGame::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2C_PG_StartGame* S2C_PG_StartGame::New(::google::protobuf::Arena* arena) const {
  S2C_PG_StartGame* n = new S2C_PG_StartGame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2C_PG_StartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.S2C_PG_StartGame)
  is_grab_ = false;
}

bool S2C_PG_StartGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.S2C_PG_StartGame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_grab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_grab_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.S2C_PG_StartGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.S2C_PG_StartGame)
  return false;
#undef DO_
}

void S2C_PG_StartGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.S2C_PG_StartGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_grab = 1;
  if (this->is_grab() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_grab(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.S2C_PG_StartGame)
}

::google::protobuf::uint8* S2C_PG_StartGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.S2C_PG_StartGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_grab = 1;
  if (this->is_grab() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_grab(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.S2C_PG_StartGame)
  return target;
}

size_t S2C_PG_StartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.S2C_PG_StartGame)
  size_t total_size = 0;

  // bool is_grab = 1;
  if (this->is_grab() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_PG_StartGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.S2C_PG_StartGame)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_PG_StartGame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2C_PG_StartGame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.S2C_PG_StartGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.S2C_PG_StartGame)
    MergeFrom(*source);
  }
}

void S2C_PG_StartGame::MergeFrom(const S2C_PG_StartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.S2C_PG_StartGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_grab() != 0) {
    set_is_grab(from.is_grab());
  }
}

void S2C_PG_StartGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.S2C_PG_StartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_PG_StartGame::CopyFrom(const S2C_PG_StartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.S2C_PG_StartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_PG_StartGame::IsInitialized() const {
  return true;
}

void S2C_PG_StartGame::Swap(S2C_PG_StartGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2C_PG_StartGame::InternalSwap(S2C_PG_StartGame* other) {
  std::swap(is_grab_, other->is_grab_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2C_PG_StartGame::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2C_PG_StartGame

// bool is_grab = 1;
void S2C_PG_StartGame::clear_is_grab() {
  is_grab_ = false;
}
bool S2C_PG_StartGame::is_grab() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_PG_StartGame.is_grab)
  return is_grab_;
}
void S2C_PG_StartGame::set_is_grab(bool value) {
  
  is_grab_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_PG_StartGame.is_grab)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2S_PG_GrabBanker::kIsGrabFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2S_PG_GrabBanker::C2S_PG_GrabBanker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.C2S_PG_GrabBanker)
}
C2S_PG_GrabBanker::C2S_PG_GrabBanker(const C2S_PG_GrabBanker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_grab_ = from.is_grab_;
  // @@protoc_insertion_point(copy_constructor:proto3_proto.C2S_PG_GrabBanker)
}

void C2S_PG_GrabBanker::SharedCtor() {
  is_grab_ = false;
  _cached_size_ = 0;
}

C2S_PG_GrabBanker::~C2S_PG_GrabBanker() {
  // @@protoc_insertion_point(destructor:proto3_proto.C2S_PG_GrabBanker)
  SharedDtor();
}

void C2S_PG_GrabBanker::SharedDtor() {
}

void C2S_PG_GrabBanker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_PG_GrabBanker::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2S_PG_GrabBanker& C2S_PG_GrabBanker::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

C2S_PG_GrabBanker* C2S_PG_GrabBanker::New(::google::protobuf::Arena* arena) const {
  C2S_PG_GrabBanker* n = new C2S_PG_GrabBanker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2S_PG_GrabBanker::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.C2S_PG_GrabBanker)
  is_grab_ = false;
}

bool C2S_PG_GrabBanker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.C2S_PG_GrabBanker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_grab = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_grab_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.C2S_PG_GrabBanker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.C2S_PG_GrabBanker)
  return false;
#undef DO_
}

void C2S_PG_GrabBanker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.C2S_PG_GrabBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_grab = 1;
  if (this->is_grab() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_grab(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.C2S_PG_GrabBanker)
}

::google::protobuf::uint8* C2S_PG_GrabBanker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.C2S_PG_GrabBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_grab = 1;
  if (this->is_grab() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_grab(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.C2S_PG_GrabBanker)
  return target;
}

size_t C2S_PG_GrabBanker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.C2S_PG_GrabBanker)
  size_t total_size = 0;

  // bool is_grab = 1;
  if (this->is_grab() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_PG_GrabBanker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.C2S_PG_GrabBanker)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_PG_GrabBanker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2S_PG_GrabBanker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.C2S_PG_GrabBanker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.C2S_PG_GrabBanker)
    MergeFrom(*source);
  }
}

void C2S_PG_GrabBanker::MergeFrom(const C2S_PG_GrabBanker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.C2S_PG_GrabBanker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.is_grab() != 0) {
    set_is_grab(from.is_grab());
  }
}

void C2S_PG_GrabBanker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.C2S_PG_GrabBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_PG_GrabBanker::CopyFrom(const C2S_PG_GrabBanker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.C2S_PG_GrabBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_PG_GrabBanker::IsInitialized() const {
  return true;
}

void C2S_PG_GrabBanker::Swap(C2S_PG_GrabBanker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2S_PG_GrabBanker::InternalSwap(C2S_PG_GrabBanker* other) {
  std::swap(is_grab_, other->is_grab_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2S_PG_GrabBanker::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2S_PG_GrabBanker

// bool is_grab = 1;
void C2S_PG_GrabBanker::clear_is_grab() {
  is_grab_ = false;
}
bool C2S_PG_GrabBanker::is_grab() const {
  // @@protoc_insertion_point(field_get:proto3_proto.C2S_PG_GrabBanker.is_grab)
  return is_grab_;
}
void C2S_PG_GrabBanker::set_is_grab(bool value) {
  
  is_grab_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.C2S_PG_GrabBanker.is_grab)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2C_PG_GrabBanker::kSeatIdFieldNumber;
const int S2C_PG_GrabBanker::kIsGrabFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2C_PG_GrabBanker::S2C_PG_GrabBanker()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.S2C_PG_GrabBanker)
}
S2C_PG_GrabBanker::S2C_PG_GrabBanker(const S2C_PG_GrabBanker& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seat_id_, &from.seat_id_,
    reinterpret_cast<char*>(&is_grab_) -
    reinterpret_cast<char*>(&seat_id_) + sizeof(is_grab_));
  // @@protoc_insertion_point(copy_constructor:proto3_proto.S2C_PG_GrabBanker)
}

void S2C_PG_GrabBanker::SharedCtor() {
  ::memset(&seat_id_, 0, reinterpret_cast<char*>(&is_grab_) -
    reinterpret_cast<char*>(&seat_id_) + sizeof(is_grab_));
  _cached_size_ = 0;
}

S2C_PG_GrabBanker::~S2C_PG_GrabBanker() {
  // @@protoc_insertion_point(destructor:proto3_proto.S2C_PG_GrabBanker)
  SharedDtor();
}

void S2C_PG_GrabBanker::SharedDtor() {
}

void S2C_PG_GrabBanker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_PG_GrabBanker::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2C_PG_GrabBanker& S2C_PG_GrabBanker::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2C_PG_GrabBanker* S2C_PG_GrabBanker::New(::google::protobuf::Arena* arena) const {
  S2C_PG_GrabBanker* n = new S2C_PG_GrabBanker;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2C_PG_GrabBanker::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.S2C_PG_GrabBanker)
  ::memset(&seat_id_, 0, reinterpret_cast<char*>(&is_grab_) -
    reinterpret_cast<char*>(&seat_id_) + sizeof(is_grab_));
}

bool S2C_PG_GrabBanker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.S2C_PG_GrabBanker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 seat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_grab = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_grab_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.S2C_PG_GrabBanker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.S2C_PG_GrabBanker)
  return false;
#undef DO_
}

void S2C_PG_GrabBanker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.S2C_PG_GrabBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // bool is_grab = 2;
  if (this->is_grab() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_grab(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.S2C_PG_GrabBanker)
}

::google::protobuf::uint8* S2C_PG_GrabBanker::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.S2C_PG_GrabBanker)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // bool is_grab = 2;
  if (this->is_grab() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_grab(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.S2C_PG_GrabBanker)
  return target;
}

size_t S2C_PG_GrabBanker::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.S2C_PG_GrabBanker)
  size_t total_size = 0;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seat_id());
  }

  // bool is_grab = 2;
  if (this->is_grab() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_PG_GrabBanker::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.S2C_PG_GrabBanker)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_PG_GrabBanker* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2C_PG_GrabBanker>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.S2C_PG_GrabBanker)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.S2C_PG_GrabBanker)
    MergeFrom(*source);
  }
}

void S2C_PG_GrabBanker::MergeFrom(const S2C_PG_GrabBanker& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.S2C_PG_GrabBanker)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seat_id() != 0) {
    set_seat_id(from.seat_id());
  }
  if (from.is_grab() != 0) {
    set_is_grab(from.is_grab());
  }
}

void S2C_PG_GrabBanker::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.S2C_PG_GrabBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_PG_GrabBanker::CopyFrom(const S2C_PG_GrabBanker& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.S2C_PG_GrabBanker)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_PG_GrabBanker::IsInitialized() const {
  return true;
}

void S2C_PG_GrabBanker::Swap(S2C_PG_GrabBanker* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2C_PG_GrabBanker::InternalSwap(S2C_PG_GrabBanker* other) {
  std::swap(seat_id_, other->seat_id_);
  std::swap(is_grab_, other->is_grab_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2C_PG_GrabBanker::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2C_PG_GrabBanker

// uint32 seat_id = 1;
void S2C_PG_GrabBanker::clear_seat_id() {
  seat_id_ = 0u;
}
::google::protobuf::uint32 S2C_PG_GrabBanker::seat_id() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_PG_GrabBanker.seat_id)
  return seat_id_;
}
void S2C_PG_GrabBanker::set_seat_id(::google::protobuf::uint32 value) {
  
  seat_id_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_PG_GrabBanker.seat_id)
}

// bool is_grab = 2;
void S2C_PG_GrabBanker::clear_is_grab() {
  is_grab_ = false;
}
bool S2C_PG_GrabBanker::is_grab() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_PG_GrabBanker.is_grab)
  return is_grab_;
}
void S2C_PG_GrabBanker::set_is_grab(bool value) {
  
  is_grab_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_PG_GrabBanker.is_grab)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2C_PG_GrabBanker_RES::kSeatIdFieldNumber;
const int S2C_PG_GrabBanker_RES::kIsBetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2C_PG_GrabBanker_RES::S2C_PG_GrabBanker_RES()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.S2C_PG_GrabBanker_RES)
}
S2C_PG_GrabBanker_RES::S2C_PG_GrabBanker_RES(const S2C_PG_GrabBanker_RES& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seat_id_, &from.seat_id_,
    reinterpret_cast<char*>(&is_bet_) -
    reinterpret_cast<char*>(&seat_id_) + sizeof(is_bet_));
  // @@protoc_insertion_point(copy_constructor:proto3_proto.S2C_PG_GrabBanker_RES)
}

void S2C_PG_GrabBanker_RES::SharedCtor() {
  ::memset(&seat_id_, 0, reinterpret_cast<char*>(&is_bet_) -
    reinterpret_cast<char*>(&seat_id_) + sizeof(is_bet_));
  _cached_size_ = 0;
}

S2C_PG_GrabBanker_RES::~S2C_PG_GrabBanker_RES() {
  // @@protoc_insertion_point(destructor:proto3_proto.S2C_PG_GrabBanker_RES)
  SharedDtor();
}

void S2C_PG_GrabBanker_RES::SharedDtor() {
}

void S2C_PG_GrabBanker_RES::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_PG_GrabBanker_RES::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2C_PG_GrabBanker_RES& S2C_PG_GrabBanker_RES::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2C_PG_GrabBanker_RES* S2C_PG_GrabBanker_RES::New(::google::protobuf::Arena* arena) const {
  S2C_PG_GrabBanker_RES* n = new S2C_PG_GrabBanker_RES;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2C_PG_GrabBanker_RES::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.S2C_PG_GrabBanker_RES)
  ::memset(&seat_id_, 0, reinterpret_cast<char*>(&is_bet_) -
    reinterpret_cast<char*>(&seat_id_) + sizeof(is_bet_));
}

bool S2C_PG_GrabBanker_RES::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.S2C_PG_GrabBanker_RES)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 seat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_bet = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_bet_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.S2C_PG_GrabBanker_RES)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.S2C_PG_GrabBanker_RES)
  return false;
#undef DO_
}

void S2C_PG_GrabBanker_RES::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.S2C_PG_GrabBanker_RES)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // bool is_bet = 2;
  if (this->is_bet() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_bet(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.S2C_PG_GrabBanker_RES)
}

::google::protobuf::uint8* S2C_PG_GrabBanker_RES::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.S2C_PG_GrabBanker_RES)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // bool is_bet = 2;
  if (this->is_bet() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_bet(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.S2C_PG_GrabBanker_RES)
  return target;
}

size_t S2C_PG_GrabBanker_RES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.S2C_PG_GrabBanker_RES)
  size_t total_size = 0;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seat_id());
  }

  // bool is_bet = 2;
  if (this->is_bet() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_PG_GrabBanker_RES::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.S2C_PG_GrabBanker_RES)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_PG_GrabBanker_RES* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2C_PG_GrabBanker_RES>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.S2C_PG_GrabBanker_RES)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.S2C_PG_GrabBanker_RES)
    MergeFrom(*source);
  }
}

void S2C_PG_GrabBanker_RES::MergeFrom(const S2C_PG_GrabBanker_RES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.S2C_PG_GrabBanker_RES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seat_id() != 0) {
    set_seat_id(from.seat_id());
  }
  if (from.is_bet() != 0) {
    set_is_bet(from.is_bet());
  }
}

void S2C_PG_GrabBanker_RES::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.S2C_PG_GrabBanker_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_PG_GrabBanker_RES::CopyFrom(const S2C_PG_GrabBanker_RES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.S2C_PG_GrabBanker_RES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_PG_GrabBanker_RES::IsInitialized() const {
  return true;
}

void S2C_PG_GrabBanker_RES::Swap(S2C_PG_GrabBanker_RES* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2C_PG_GrabBanker_RES::InternalSwap(S2C_PG_GrabBanker_RES* other) {
  std::swap(seat_id_, other->seat_id_);
  std::swap(is_bet_, other->is_bet_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2C_PG_GrabBanker_RES::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2C_PG_GrabBanker_RES

// uint32 seat_id = 1;
void S2C_PG_GrabBanker_RES::clear_seat_id() {
  seat_id_ = 0u;
}
::google::protobuf::uint32 S2C_PG_GrabBanker_RES::seat_id() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_PG_GrabBanker_RES.seat_id)
  return seat_id_;
}
void S2C_PG_GrabBanker_RES::set_seat_id(::google::protobuf::uint32 value) {
  
  seat_id_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_PG_GrabBanker_RES.seat_id)
}

// bool is_bet = 2;
void S2C_PG_GrabBanker_RES::clear_is_bet() {
  is_bet_ = false;
}
bool S2C_PG_GrabBanker_RES::is_bet() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_PG_GrabBanker_RES.is_bet)
  return is_bet_;
}
void S2C_PG_GrabBanker_RES::set_is_bet(bool value) {
  
  is_bet_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_PG_GrabBanker_RES.is_bet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2S_PG_Bet::kChipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2S_PG_Bet::C2S_PG_Bet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.C2S_PG_Bet)
}
C2S_PG_Bet::C2S_PG_Bet(const C2S_PG_Bet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      chips_(from.chips_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto3_proto.C2S_PG_Bet)
}

void C2S_PG_Bet::SharedCtor() {
  _cached_size_ = 0;
}

C2S_PG_Bet::~C2S_PG_Bet() {
  // @@protoc_insertion_point(destructor:proto3_proto.C2S_PG_Bet)
  SharedDtor();
}

void C2S_PG_Bet::SharedDtor() {
}

void C2S_PG_Bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_PG_Bet::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2S_PG_Bet& C2S_PG_Bet::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

C2S_PG_Bet* C2S_PG_Bet::New(::google::protobuf::Arena* arena) const {
  C2S_PG_Bet* n = new C2S_PG_Bet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2S_PG_Bet::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.C2S_PG_Bet)
  chips_.Clear();
}

bool C2S_PG_Bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.C2S_PG_Bet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 chips = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chips())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_chips())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.C2S_PG_Bet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.C2S_PG_Bet)
  return false;
#undef DO_
}

void C2S_PG_Bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.C2S_PG_Bet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 chips = 1;
  if (this->chips_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_chips_cached_byte_size_);
  }
  for (int i = 0, n = this->chips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->chips(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.C2S_PG_Bet)
}

::google::protobuf::uint8* C2S_PG_Bet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.C2S_PG_Bet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 chips = 1;
  if (this->chips_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _chips_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->chips_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.C2S_PG_Bet)
  return target;
}

size_t C2S_PG_Bet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.C2S_PG_Bet)
  size_t total_size = 0;

  // repeated uint32 chips = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->chips_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _chips_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_PG_Bet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.C2S_PG_Bet)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_PG_Bet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2S_PG_Bet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.C2S_PG_Bet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.C2S_PG_Bet)
    MergeFrom(*source);
  }
}

void C2S_PG_Bet::MergeFrom(const C2S_PG_Bet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.C2S_PG_Bet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chips_.MergeFrom(from.chips_);
}

void C2S_PG_Bet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.C2S_PG_Bet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_PG_Bet::CopyFrom(const C2S_PG_Bet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.C2S_PG_Bet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_PG_Bet::IsInitialized() const {
  return true;
}

void C2S_PG_Bet::Swap(C2S_PG_Bet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2S_PG_Bet::InternalSwap(C2S_PG_Bet* other) {
  chips_.InternalSwap(&other->chips_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2S_PG_Bet::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2S_PG_Bet

// repeated uint32 chips = 1;
int C2S_PG_Bet::chips_size() const {
  return chips_.size();
}
void C2S_PG_Bet::clear_chips() {
  chips_.Clear();
}
::google::protobuf::uint32 C2S_PG_Bet::chips(int index) const {
  // @@protoc_insertion_point(field_get:proto3_proto.C2S_PG_Bet.chips)
  return chips_.Get(index);
}
void C2S_PG_Bet::set_chips(int index, ::google::protobuf::uint32 value) {
  chips_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3_proto.C2S_PG_Bet.chips)
}
void C2S_PG_Bet::add_chips(::google::protobuf::uint32 value) {
  chips_.Add(value);
  // @@protoc_insertion_point(field_add:proto3_proto.C2S_PG_Bet.chips)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
C2S_PG_Bet::chips() const {
  // @@protoc_insertion_point(field_list:proto3_proto.C2S_PG_Bet.chips)
  return chips_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
C2S_PG_Bet::mutable_chips() {
  // @@protoc_insertion_point(field_mutable_list:proto3_proto.C2S_PG_Bet.chips)
  return &chips_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2C_PG_Bet::kSeatIdFieldNumber;
const int S2C_PG_Bet::kChipsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2C_PG_Bet::S2C_PG_Bet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.S2C_PG_Bet)
}
S2C_PG_Bet::S2C_PG_Bet(const S2C_PG_Bet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      chips_(from.chips_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seat_id_ = from.seat_id_;
  // @@protoc_insertion_point(copy_constructor:proto3_proto.S2C_PG_Bet)
}

void S2C_PG_Bet::SharedCtor() {
  seat_id_ = 0u;
  _cached_size_ = 0;
}

S2C_PG_Bet::~S2C_PG_Bet() {
  // @@protoc_insertion_point(destructor:proto3_proto.S2C_PG_Bet)
  SharedDtor();
}

void S2C_PG_Bet::SharedDtor() {
}

void S2C_PG_Bet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_PG_Bet::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2C_PG_Bet& S2C_PG_Bet::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2C_PG_Bet* S2C_PG_Bet::New(::google::protobuf::Arena* arena) const {
  S2C_PG_Bet* n = new S2C_PG_Bet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2C_PG_Bet::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.S2C_PG_Bet)
  chips_.Clear();
  seat_id_ = 0u;
}

bool S2C_PG_Bet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.S2C_PG_Bet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 seat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 chips = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_chips())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_chips())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.S2C_PG_Bet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.S2C_PG_Bet)
  return false;
#undef DO_
}

void S2C_PG_Bet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.S2C_PG_Bet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // repeated uint32 chips = 2;
  if (this->chips_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_chips_cached_byte_size_);
  }
  for (int i = 0, n = this->chips_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->chips(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.S2C_PG_Bet)
}

::google::protobuf::uint8* S2C_PG_Bet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.S2C_PG_Bet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // repeated uint32 chips = 2;
  if (this->chips_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _chips_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->chips_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.S2C_PG_Bet)
  return target;
}

size_t S2C_PG_Bet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.S2C_PG_Bet)
  size_t total_size = 0;

  // repeated uint32 chips = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->chips_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _chips_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seat_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_PG_Bet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.S2C_PG_Bet)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_PG_Bet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2C_PG_Bet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.S2C_PG_Bet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.S2C_PG_Bet)
    MergeFrom(*source);
  }
}

void S2C_PG_Bet::MergeFrom(const S2C_PG_Bet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.S2C_PG_Bet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  chips_.MergeFrom(from.chips_);
  if (from.seat_id() != 0) {
    set_seat_id(from.seat_id());
  }
}

void S2C_PG_Bet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.S2C_PG_Bet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_PG_Bet::CopyFrom(const S2C_PG_Bet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.S2C_PG_Bet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_PG_Bet::IsInitialized() const {
  return true;
}

void S2C_PG_Bet::Swap(S2C_PG_Bet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2C_PG_Bet::InternalSwap(S2C_PG_Bet* other) {
  chips_.InternalSwap(&other->chips_);
  std::swap(seat_id_, other->seat_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2C_PG_Bet::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2C_PG_Bet

// uint32 seat_id = 1;
void S2C_PG_Bet::clear_seat_id() {
  seat_id_ = 0u;
}
::google::protobuf::uint32 S2C_PG_Bet::seat_id() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_PG_Bet.seat_id)
  return seat_id_;
}
void S2C_PG_Bet::set_seat_id(::google::protobuf::uint32 value) {
  
  seat_id_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_PG_Bet.seat_id)
}

// repeated uint32 chips = 2;
int S2C_PG_Bet::chips_size() const {
  return chips_.size();
}
void S2C_PG_Bet::clear_chips() {
  chips_.Clear();
}
::google::protobuf::uint32 S2C_PG_Bet::chips(int index) const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_PG_Bet.chips)
  return chips_.Get(index);
}
void S2C_PG_Bet::set_chips(int index, ::google::protobuf::uint32 value) {
  chips_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_PG_Bet.chips)
}
void S2C_PG_Bet::add_chips(::google::protobuf::uint32 value) {
  chips_.Add(value);
  // @@protoc_insertion_point(field_add:proto3_proto.S2C_PG_Bet.chips)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
S2C_PG_Bet::chips() const {
  // @@protoc_insertion_point(field_list:proto3_proto.S2C_PG_Bet.chips)
  return chips_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
S2C_PG_Bet::mutable_chips() {
  // @@protoc_insertion_point(field_mutable_list:proto3_proto.S2C_PG_Bet.chips)
  return &chips_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2C_PG_Deal::kMyCardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2C_PG_Deal::S2C_PG_Deal()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.S2C_PG_Deal)
}
S2C_PG_Deal::S2C_PG_Deal(const S2C_PG_Deal& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      my_card_(from.my_card_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto3_proto.S2C_PG_Deal)
}

void S2C_PG_Deal::SharedCtor() {
  _cached_size_ = 0;
}

S2C_PG_Deal::~S2C_PG_Deal() {
  // @@protoc_insertion_point(destructor:proto3_proto.S2C_PG_Deal)
  SharedDtor();
}

void S2C_PG_Deal::SharedDtor() {
}

void S2C_PG_Deal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_PG_Deal::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2C_PG_Deal& S2C_PG_Deal::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2C_PG_Deal* S2C_PG_Deal::New(::google::protobuf::Arena* arena) const {
  S2C_PG_Deal* n = new S2C_PG_Deal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2C_PG_Deal::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.S2C_PG_Deal)
  my_card_.Clear();
}

bool S2C_PG_Deal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.S2C_PG_Deal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 my_card = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_my_card())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_my_card())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.S2C_PG_Deal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.S2C_PG_Deal)
  return false;
#undef DO_
}

void S2C_PG_Deal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.S2C_PG_Deal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 my_card = 1;
  if (this->my_card_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_my_card_cached_byte_size_);
  }
  for (int i = 0, n = this->my_card_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->my_card(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.S2C_PG_Deal)
}

::google::protobuf::uint8* S2C_PG_Deal::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.S2C_PG_Deal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 my_card = 1;
  if (this->my_card_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _my_card_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->my_card_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.S2C_PG_Deal)
  return target;
}

size_t S2C_PG_Deal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.S2C_PG_Deal)
  size_t total_size = 0;

  // repeated uint32 my_card = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->my_card_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _my_card_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_PG_Deal::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.S2C_PG_Deal)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_PG_Deal* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2C_PG_Deal>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.S2C_PG_Deal)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.S2C_PG_Deal)
    MergeFrom(*source);
  }
}

void S2C_PG_Deal::MergeFrom(const S2C_PG_Deal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.S2C_PG_Deal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  my_card_.MergeFrom(from.my_card_);
}

void S2C_PG_Deal::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.S2C_PG_Deal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_PG_Deal::CopyFrom(const S2C_PG_Deal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.S2C_PG_Deal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_PG_Deal::IsInitialized() const {
  return true;
}

void S2C_PG_Deal::Swap(S2C_PG_Deal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2C_PG_Deal::InternalSwap(S2C_PG_Deal* other) {
  my_card_.InternalSwap(&other->my_card_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2C_PG_Deal::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2C_PG_Deal

// repeated uint32 my_card = 1;
int S2C_PG_Deal::my_card_size() const {
  return my_card_.size();
}
void S2C_PG_Deal::clear_my_card() {
  my_card_.Clear();
}
::google::protobuf::uint32 S2C_PG_Deal::my_card(int index) const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_PG_Deal.my_card)
  return my_card_.Get(index);
}
void S2C_PG_Deal::set_my_card(int index, ::google::protobuf::uint32 value) {
  my_card_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_PG_Deal.my_card)
}
void S2C_PG_Deal::add_my_card(::google::protobuf::uint32 value) {
  my_card_.Add(value);
  // @@protoc_insertion_point(field_add:proto3_proto.S2C_PG_Deal.my_card)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
S2C_PG_Deal::my_card() const {
  // @@protoc_insertion_point(field_list:proto3_proto.S2C_PG_Deal.my_card)
  return my_card_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
S2C_PG_Deal::mutable_my_card() {
  // @@protoc_insertion_point(field_mutable_list:proto3_proto.S2C_PG_Deal.my_card)
  return &my_card_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2S_PG_Collocation::kFirstFieldNumber;
const int C2S_PG_Collocation::kEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2S_PG_Collocation::C2S_PG_Collocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.C2S_PG_Collocation)
}
C2S_PG_Collocation::C2S_PG_Collocation(const C2S_PG_Collocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      first_(from.first_),
      end_(from.end_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto3_proto.C2S_PG_Collocation)
}

void C2S_PG_Collocation::SharedCtor() {
  _cached_size_ = 0;
}

C2S_PG_Collocation::~C2S_PG_Collocation() {
  // @@protoc_insertion_point(destructor:proto3_proto.C2S_PG_Collocation)
  SharedDtor();
}

void C2S_PG_Collocation::SharedDtor() {
}

void C2S_PG_Collocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_PG_Collocation::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2S_PG_Collocation& C2S_PG_Collocation::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

C2S_PG_Collocation* C2S_PG_Collocation::New(::google::protobuf::Arena* arena) const {
  C2S_PG_Collocation* n = new C2S_PG_Collocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2S_PG_Collocation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.C2S_PG_Collocation)
  first_.Clear();
  end_.Clear();
}

bool C2S_PG_Collocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.C2S_PG_Collocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 first = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_first())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(8u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_first())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 end = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_end())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_end())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.C2S_PG_Collocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.C2S_PG_Collocation)
  return false;
#undef DO_
}

void C2S_PG_Collocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.C2S_PG_Collocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 first = 1;
  if (this->first_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_first_cached_byte_size_);
  }
  for (int i = 0, n = this->first_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->first(i), output);
  }

  // repeated uint32 end = 2;
  if (this->end_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_end_cached_byte_size_);
  }
  for (int i = 0, n = this->end_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->end(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.C2S_PG_Collocation)
}

::google::protobuf::uint8* C2S_PG_Collocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.C2S_PG_Collocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 first = 1;
  if (this->first_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _first_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->first_, target);
  }

  // repeated uint32 end = 2;
  if (this->end_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _end_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->end_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.C2S_PG_Collocation)
  return target;
}

size_t C2S_PG_Collocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.C2S_PG_Collocation)
  size_t total_size = 0;

  // repeated uint32 first = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->first_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _first_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 end = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->end_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _end_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_PG_Collocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.C2S_PG_Collocation)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_PG_Collocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2S_PG_Collocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.C2S_PG_Collocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.C2S_PG_Collocation)
    MergeFrom(*source);
  }
}

void C2S_PG_Collocation::MergeFrom(const C2S_PG_Collocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.C2S_PG_Collocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  first_.MergeFrom(from.first_);
  end_.MergeFrom(from.end_);
}

void C2S_PG_Collocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.C2S_PG_Collocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_PG_Collocation::CopyFrom(const C2S_PG_Collocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.C2S_PG_Collocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_PG_Collocation::IsInitialized() const {
  return true;
}

void C2S_PG_Collocation::Swap(C2S_PG_Collocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2S_PG_Collocation::InternalSwap(C2S_PG_Collocation* other) {
  first_.InternalSwap(&other->first_);
  end_.InternalSwap(&other->end_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2S_PG_Collocation::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2S_PG_Collocation

// repeated uint32 first = 1;
int C2S_PG_Collocation::first_size() const {
  return first_.size();
}
void C2S_PG_Collocation::clear_first() {
  first_.Clear();
}
::google::protobuf::uint32 C2S_PG_Collocation::first(int index) const {
  // @@protoc_insertion_point(field_get:proto3_proto.C2S_PG_Collocation.first)
  return first_.Get(index);
}
void C2S_PG_Collocation::set_first(int index, ::google::protobuf::uint32 value) {
  first_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3_proto.C2S_PG_Collocation.first)
}
void C2S_PG_Collocation::add_first(::google::protobuf::uint32 value) {
  first_.Add(value);
  // @@protoc_insertion_point(field_add:proto3_proto.C2S_PG_Collocation.first)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
C2S_PG_Collocation::first() const {
  // @@protoc_insertion_point(field_list:proto3_proto.C2S_PG_Collocation.first)
  return first_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
C2S_PG_Collocation::mutable_first() {
  // @@protoc_insertion_point(field_mutable_list:proto3_proto.C2S_PG_Collocation.first)
  return &first_;
}

// repeated uint32 end = 2;
int C2S_PG_Collocation::end_size() const {
  return end_.size();
}
void C2S_PG_Collocation::clear_end() {
  end_.Clear();
}
::google::protobuf::uint32 C2S_PG_Collocation::end(int index) const {
  // @@protoc_insertion_point(field_get:proto3_proto.C2S_PG_Collocation.end)
  return end_.Get(index);
}
void C2S_PG_Collocation::set_end(int index, ::google::protobuf::uint32 value) {
  end_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3_proto.C2S_PG_Collocation.end)
}
void C2S_PG_Collocation::add_end(::google::protobuf::uint32 value) {
  end_.Add(value);
  // @@protoc_insertion_point(field_add:proto3_proto.C2S_PG_Collocation.end)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
C2S_PG_Collocation::end() const {
  // @@protoc_insertion_point(field_list:proto3_proto.C2S_PG_Collocation.end)
  return end_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
C2S_PG_Collocation::mutable_end() {
  // @@protoc_insertion_point(field_mutable_list:proto3_proto.C2S_PG_Collocation.end)
  return &end_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2C_PG_Collocation::kSeatIdFieldNumber;
const int S2C_PG_Collocation::kFirstCardsFieldNumber;
const int S2C_PG_Collocation::kEndCardsFieldNumber;
const int S2C_PG_Collocation::kTestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2C_PG_Collocation::S2C_PG_Collocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.S2C_PG_Collocation)
}
S2C_PG_Collocation::S2C_PG_Collocation(const S2C_PG_Collocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      first_cards_(from.first_cards_),
      end_cards_(from.end_cards_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&seat_id_, &from.seat_id_,
    reinterpret_cast<char*>(&test_) -
    reinterpret_cast<char*>(&seat_id_) + sizeof(test_));
  // @@protoc_insertion_point(copy_constructor:proto3_proto.S2C_PG_Collocation)
}

void S2C_PG_Collocation::SharedCtor() {
  ::memset(&seat_id_, 0, reinterpret_cast<char*>(&test_) -
    reinterpret_cast<char*>(&seat_id_) + sizeof(test_));
  _cached_size_ = 0;
}

S2C_PG_Collocation::~S2C_PG_Collocation() {
  // @@protoc_insertion_point(destructor:proto3_proto.S2C_PG_Collocation)
  SharedDtor();
}

void S2C_PG_Collocation::SharedDtor() {
}

void S2C_PG_Collocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_PG_Collocation::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2C_PG_Collocation& S2C_PG_Collocation::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2C_PG_Collocation* S2C_PG_Collocation::New(::google::protobuf::Arena* arena) const {
  S2C_PG_Collocation* n = new S2C_PG_Collocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2C_PG_Collocation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.S2C_PG_Collocation)
  first_cards_.Clear();
  end_cards_.Clear();
  ::memset(&seat_id_, 0, reinterpret_cast<char*>(&test_) -
    reinterpret_cast<char*>(&seat_id_) + sizeof(test_));
}

bool S2C_PG_Collocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.S2C_PG_Collocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 seat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 first_cards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_first_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_first_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 end_cards = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_end_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(24u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_end_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 test = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &test_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.S2C_PG_Collocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.S2C_PG_Collocation)
  return false;
#undef DO_
}

void S2C_PG_Collocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.S2C_PG_Collocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // repeated uint32 first_cards = 2;
  if (this->first_cards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_first_cards_cached_byte_size_);
  }
  for (int i = 0, n = this->first_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->first_cards(i), output);
  }

  // repeated uint32 end_cards = 3;
  if (this->end_cards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_end_cards_cached_byte_size_);
  }
  for (int i = 0, n = this->end_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->end_cards(i), output);
  }

  // uint32 test = 4;
  if (this->test() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->test(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.S2C_PG_Collocation)
}

::google::protobuf::uint8* S2C_PG_Collocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.S2C_PG_Collocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // repeated uint32 first_cards = 2;
  if (this->first_cards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _first_cards_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->first_cards_, target);
  }

  // repeated uint32 end_cards = 3;
  if (this->end_cards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _end_cards_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->end_cards_, target);
  }

  // uint32 test = 4;
  if (this->test() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->test(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.S2C_PG_Collocation)
  return target;
}

size_t S2C_PG_Collocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.S2C_PG_Collocation)
  size_t total_size = 0;

  // repeated uint32 first_cards = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->first_cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _first_cards_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 end_cards = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->end_cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _end_cards_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seat_id());
  }

  // uint32 test = 4;
  if (this->test() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->test());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_PG_Collocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.S2C_PG_Collocation)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_PG_Collocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2C_PG_Collocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.S2C_PG_Collocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.S2C_PG_Collocation)
    MergeFrom(*source);
  }
}

void S2C_PG_Collocation::MergeFrom(const S2C_PG_Collocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.S2C_PG_Collocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  first_cards_.MergeFrom(from.first_cards_);
  end_cards_.MergeFrom(from.end_cards_);
  if (from.seat_id() != 0) {
    set_seat_id(from.seat_id());
  }
  if (from.test() != 0) {
    set_test(from.test());
  }
}

void S2C_PG_Collocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.S2C_PG_Collocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_PG_Collocation::CopyFrom(const S2C_PG_Collocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.S2C_PG_Collocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_PG_Collocation::IsInitialized() const {
  return true;
}

void S2C_PG_Collocation::Swap(S2C_PG_Collocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2C_PG_Collocation::InternalSwap(S2C_PG_Collocation* other) {
  first_cards_.InternalSwap(&other->first_cards_);
  end_cards_.InternalSwap(&other->end_cards_);
  std::swap(seat_id_, other->seat_id_);
  std::swap(test_, other->test_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2C_PG_Collocation::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2C_PG_Collocation

// uint32 seat_id = 1;
void S2C_PG_Collocation::clear_seat_id() {
  seat_id_ = 0u;
}
::google::protobuf::uint32 S2C_PG_Collocation::seat_id() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_PG_Collocation.seat_id)
  return seat_id_;
}
void S2C_PG_Collocation::set_seat_id(::google::protobuf::uint32 value) {
  
  seat_id_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_PG_Collocation.seat_id)
}

// repeated uint32 first_cards = 2;
int S2C_PG_Collocation::first_cards_size() const {
  return first_cards_.size();
}
void S2C_PG_Collocation::clear_first_cards() {
  first_cards_.Clear();
}
::google::protobuf::uint32 S2C_PG_Collocation::first_cards(int index) const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_PG_Collocation.first_cards)
  return first_cards_.Get(index);
}
void S2C_PG_Collocation::set_first_cards(int index, ::google::protobuf::uint32 value) {
  first_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_PG_Collocation.first_cards)
}
void S2C_PG_Collocation::add_first_cards(::google::protobuf::uint32 value) {
  first_cards_.Add(value);
  // @@protoc_insertion_point(field_add:proto3_proto.S2C_PG_Collocation.first_cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
S2C_PG_Collocation::first_cards() const {
  // @@protoc_insertion_point(field_list:proto3_proto.S2C_PG_Collocation.first_cards)
  return first_cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
S2C_PG_Collocation::mutable_first_cards() {
  // @@protoc_insertion_point(field_mutable_list:proto3_proto.S2C_PG_Collocation.first_cards)
  return &first_cards_;
}

// repeated uint32 end_cards = 3;
int S2C_PG_Collocation::end_cards_size() const {
  return end_cards_.size();
}
void S2C_PG_Collocation::clear_end_cards() {
  end_cards_.Clear();
}
::google::protobuf::uint32 S2C_PG_Collocation::end_cards(int index) const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_PG_Collocation.end_cards)
  return end_cards_.Get(index);
}
void S2C_PG_Collocation::set_end_cards(int index, ::google::protobuf::uint32 value) {
  end_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_PG_Collocation.end_cards)
}
void S2C_PG_Collocation::add_end_cards(::google::protobuf::uint32 value) {
  end_cards_.Add(value);
  // @@protoc_insertion_point(field_add:proto3_proto.S2C_PG_Collocation.end_cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
S2C_PG_Collocation::end_cards() const {
  // @@protoc_insertion_point(field_list:proto3_proto.S2C_PG_Collocation.end_cards)
  return end_cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
S2C_PG_Collocation::mutable_end_cards() {
  // @@protoc_insertion_point(field_mutable_list:proto3_proto.S2C_PG_Collocation.end_cards)
  return &end_cards_;
}

// uint32 test = 4;
void S2C_PG_Collocation::clear_test() {
  test_ = 0u;
}
::google::protobuf::uint32 S2C_PG_Collocation::test() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_PG_Collocation.test)
  return test_;
}
void S2C_PG_Collocation::set_test(::google::protobuf::uint32 value) {
  
  test_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_PG_Collocation.test)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2C_PG_Result::kScoresFieldNumber;
const int S2C_PG_Result::kPublicCardsFieldNumber;
const int S2C_PG_Result::kIsEndFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2C_PG_Result::S2C_PG_Result()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.S2C_PG_Result)
}
S2C_PG_Result::S2C_PG_Result(const S2C_PG_Result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      scores_(from.scores_),
      public_cards_(from.public_cards_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_end_ = from.is_end_;
  // @@protoc_insertion_point(copy_constructor:proto3_proto.S2C_PG_Result)
}

void S2C_PG_Result::SharedCtor() {
  is_end_ = false;
  _cached_size_ = 0;
}

S2C_PG_Result::~S2C_PG_Result() {
  // @@protoc_insertion_point(destructor:proto3_proto.S2C_PG_Result)
  SharedDtor();
}

void S2C_PG_Result::SharedDtor() {
}

void S2C_PG_Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_PG_Result::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2C_PG_Result& S2C_PG_Result::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2C_PG_Result* S2C_PG_Result::New(::google::protobuf::Arena* arena) const {
  S2C_PG_Result* n = new S2C_PG_Result;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2C_PG_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.S2C_PG_Result)
  scores_.Clear();
  public_cards_.Clear();
  is_end_ = false;
}

bool S2C_PG_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.S2C_PG_Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto3_proto.PaiGowResult scores = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scores()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 public_cards = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_public_cards())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(16u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_public_cards())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_end = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.S2C_PG_Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.S2C_PG_Result)
  return false;
#undef DO_
}

void S2C_PG_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.S2C_PG_Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto3_proto.PaiGowResult scores = 1;
  for (unsigned int i = 0, n = this->scores_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->scores(i), output);
  }

  // repeated uint32 public_cards = 2;
  if (this->public_cards_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_public_cards_cached_byte_size_);
  }
  for (int i = 0, n = this->public_cards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->public_cards(i), output);
  }

  // bool is_end = 3;
  if (this->is_end() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_end(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.S2C_PG_Result)
}

::google::protobuf::uint8* S2C_PG_Result::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.S2C_PG_Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto3_proto.PaiGowResult scores = 1;
  for (unsigned int i = 0, n = this->scores_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->scores(i), deterministic, target);
  }

  // repeated uint32 public_cards = 2;
  if (this->public_cards_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _public_cards_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->public_cards_, target);
  }

  // bool is_end = 3;
  if (this->is_end() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_end(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.S2C_PG_Result)
  return target;
}

size_t S2C_PG_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.S2C_PG_Result)
  size_t total_size = 0;

  // repeated .proto3_proto.PaiGowResult scores = 1;
  {
    unsigned int count = this->scores_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->scores(i));
    }
  }

  // repeated uint32 public_cards = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->public_cards_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _public_cards_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bool is_end = 3;
  if (this->is_end() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_PG_Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.S2C_PG_Result)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_PG_Result* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2C_PG_Result>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.S2C_PG_Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.S2C_PG_Result)
    MergeFrom(*source);
  }
}

void S2C_PG_Result::MergeFrom(const S2C_PG_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.S2C_PG_Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  scores_.MergeFrom(from.scores_);
  public_cards_.MergeFrom(from.public_cards_);
  if (from.is_end() != 0) {
    set_is_end(from.is_end());
  }
}

void S2C_PG_Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.S2C_PG_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_PG_Result::CopyFrom(const S2C_PG_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.S2C_PG_Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_PG_Result::IsInitialized() const {
  return true;
}

void S2C_PG_Result::Swap(S2C_PG_Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2C_PG_Result::InternalSwap(S2C_PG_Result* other) {
  scores_.InternalSwap(&other->scores_);
  public_cards_.InternalSwap(&other->public_cards_);
  std::swap(is_end_, other->is_end_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2C_PG_Result::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2C_PG_Result

// repeated .proto3_proto.PaiGowResult scores = 1;
int S2C_PG_Result::scores_size() const {
  return scores_.size();
}
void S2C_PG_Result::clear_scores() {
  scores_.Clear();
}
const ::proto3_proto::PaiGowResult& S2C_PG_Result::scores(int index) const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_PG_Result.scores)
  return scores_.Get(index);
}
::proto3_proto::PaiGowResult* S2C_PG_Result::mutable_scores(int index) {
  // @@protoc_insertion_point(field_mutable:proto3_proto.S2C_PG_Result.scores)
  return scores_.Mutable(index);
}
::proto3_proto::PaiGowResult* S2C_PG_Result::add_scores() {
  // @@protoc_insertion_point(field_add:proto3_proto.S2C_PG_Result.scores)
  return scores_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3_proto::PaiGowResult >*
S2C_PG_Result::mutable_scores() {
  // @@protoc_insertion_point(field_mutable_list:proto3_proto.S2C_PG_Result.scores)
  return &scores_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3_proto::PaiGowResult >&
S2C_PG_Result::scores() const {
  // @@protoc_insertion_point(field_list:proto3_proto.S2C_PG_Result.scores)
  return scores_;
}

// repeated uint32 public_cards = 2;
int S2C_PG_Result::public_cards_size() const {
  return public_cards_.size();
}
void S2C_PG_Result::clear_public_cards() {
  public_cards_.Clear();
}
::google::protobuf::uint32 S2C_PG_Result::public_cards(int index) const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_PG_Result.public_cards)
  return public_cards_.Get(index);
}
void S2C_PG_Result::set_public_cards(int index, ::google::protobuf::uint32 value) {
  public_cards_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_PG_Result.public_cards)
}
void S2C_PG_Result::add_public_cards(::google::protobuf::uint32 value) {
  public_cards_.Add(value);
  // @@protoc_insertion_point(field_add:proto3_proto.S2C_PG_Result.public_cards)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
S2C_PG_Result::public_cards() const {
  // @@protoc_insertion_point(field_list:proto3_proto.S2C_PG_Result.public_cards)
  return public_cards_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
S2C_PG_Result::mutable_public_cards() {
  // @@protoc_insertion_point(field_mutable_list:proto3_proto.S2C_PG_Result.public_cards)
  return &public_cards_;
}

// bool is_end = 3;
void S2C_PG_Result::clear_is_end() {
  is_end_ = false;
}
bool S2C_PG_Result::is_end() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_PG_Result.is_end)
  return is_end_;
}
void S2C_PG_Result::set_is_end(bool value) {
  
  is_end_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_PG_Result.is_end)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2S_PG_Sure::C2S_PG_Sure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.C2S_PG_Sure)
}
C2S_PG_Sure::C2S_PG_Sure(const C2S_PG_Sure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto3_proto.C2S_PG_Sure)
}

void C2S_PG_Sure::SharedCtor() {
  _cached_size_ = 0;
}

C2S_PG_Sure::~C2S_PG_Sure() {
  // @@protoc_insertion_point(destructor:proto3_proto.C2S_PG_Sure)
  SharedDtor();
}

void C2S_PG_Sure::SharedDtor() {
}

void C2S_PG_Sure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_PG_Sure::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2S_PG_Sure& C2S_PG_Sure::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

C2S_PG_Sure* C2S_PG_Sure::New(::google::protobuf::Arena* arena) const {
  C2S_PG_Sure* n = new C2S_PG_Sure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2S_PG_Sure::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.C2S_PG_Sure)
}

bool C2S_PG_Sure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.C2S_PG_Sure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.C2S_PG_Sure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.C2S_PG_Sure)
  return false;
#undef DO_
}

void C2S_PG_Sure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.C2S_PG_Sure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:proto3_proto.C2S_PG_Sure)
}

::google::protobuf::uint8* C2S_PG_Sure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.C2S_PG_Sure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.C2S_PG_Sure)
  return target;
}

size_t C2S_PG_Sure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.C2S_PG_Sure)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_PG_Sure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.C2S_PG_Sure)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_PG_Sure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2S_PG_Sure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.C2S_PG_Sure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.C2S_PG_Sure)
    MergeFrom(*source);
  }
}

void C2S_PG_Sure::MergeFrom(const C2S_PG_Sure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.C2S_PG_Sure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void C2S_PG_Sure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.C2S_PG_Sure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_PG_Sure::CopyFrom(const C2S_PG_Sure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.C2S_PG_Sure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_PG_Sure::IsInitialized() const {
  return true;
}

void C2S_PG_Sure::Swap(C2S_PG_Sure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2S_PG_Sure::InternalSwap(C2S_PG_Sure* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2S_PG_Sure::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2S_PG_Sure

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2C_PG_Sure::kSeatIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2C_PG_Sure::S2C_PG_Sure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.S2C_PG_Sure)
}
S2C_PG_Sure::S2C_PG_Sure(const S2C_PG_Sure& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seat_id_ = from.seat_id_;
  // @@protoc_insertion_point(copy_constructor:proto3_proto.S2C_PG_Sure)
}

void S2C_PG_Sure::SharedCtor() {
  seat_id_ = 0u;
  _cached_size_ = 0;
}

S2C_PG_Sure::~S2C_PG_Sure() {
  // @@protoc_insertion_point(destructor:proto3_proto.S2C_PG_Sure)
  SharedDtor();
}

void S2C_PG_Sure::SharedDtor() {
}

void S2C_PG_Sure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_PG_Sure::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2C_PG_Sure& S2C_PG_Sure::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2C_PG_Sure* S2C_PG_Sure::New(::google::protobuf::Arena* arena) const {
  S2C_PG_Sure* n = new S2C_PG_Sure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2C_PG_Sure::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.S2C_PG_Sure)
  seat_id_ = 0u;
}

bool S2C_PG_Sure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.S2C_PG_Sure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 seat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.S2C_PG_Sure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.S2C_PG_Sure)
  return false;
#undef DO_
}

void S2C_PG_Sure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.S2C_PG_Sure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.S2C_PG_Sure)
}

::google::protobuf::uint8* S2C_PG_Sure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.S2C_PG_Sure)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.S2C_PG_Sure)
  return target;
}

size_t S2C_PG_Sure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.S2C_PG_Sure)
  size_t total_size = 0;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seat_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_PG_Sure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.S2C_PG_Sure)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_PG_Sure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2C_PG_Sure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.S2C_PG_Sure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.S2C_PG_Sure)
    MergeFrom(*source);
  }
}

void S2C_PG_Sure::MergeFrom(const S2C_PG_Sure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.S2C_PG_Sure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seat_id() != 0) {
    set_seat_id(from.seat_id());
  }
}

void S2C_PG_Sure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.S2C_PG_Sure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_PG_Sure::CopyFrom(const S2C_PG_Sure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.S2C_PG_Sure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_PG_Sure::IsInitialized() const {
  return true;
}

void S2C_PG_Sure::Swap(S2C_PG_Sure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2C_PG_Sure::InternalSwap(S2C_PG_Sure* other) {
  std::swap(seat_id_, other->seat_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2C_PG_Sure::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2C_PG_Sure

// uint32 seat_id = 1;
void S2C_PG_Sure::clear_seat_id() {
  seat_id_ = 0u;
}
::google::protobuf::uint32 S2C_PG_Sure::seat_id() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_PG_Sure.seat_id)
  return seat_id_;
}
void S2C_PG_Sure::set_seat_id(::google::protobuf::uint32 value) {
  
  seat_id_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_PG_Sure.seat_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2S_PG_Kick::kSeatIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2S_PG_Kick::C2S_PG_Kick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.C2S_PG_Kick)
}
C2S_PG_Kick::C2S_PG_Kick(const C2S_PG_Kick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seat_id_ = from.seat_id_;
  // @@protoc_insertion_point(copy_constructor:proto3_proto.C2S_PG_Kick)
}

void C2S_PG_Kick::SharedCtor() {
  seat_id_ = 0u;
  _cached_size_ = 0;
}

C2S_PG_Kick::~C2S_PG_Kick() {
  // @@protoc_insertion_point(destructor:proto3_proto.C2S_PG_Kick)
  SharedDtor();
}

void C2S_PG_Kick::SharedDtor() {
}

void C2S_PG_Kick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_PG_Kick::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2S_PG_Kick& C2S_PG_Kick::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

C2S_PG_Kick* C2S_PG_Kick::New(::google::protobuf::Arena* arena) const {
  C2S_PG_Kick* n = new C2S_PG_Kick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2S_PG_Kick::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.C2S_PG_Kick)
  seat_id_ = 0u;
}

bool C2S_PG_Kick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.C2S_PG_Kick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 seat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.C2S_PG_Kick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.C2S_PG_Kick)
  return false;
#undef DO_
}

void C2S_PG_Kick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.C2S_PG_Kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.C2S_PG_Kick)
}

::google::protobuf::uint8* C2S_PG_Kick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.C2S_PG_Kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.C2S_PG_Kick)
  return target;
}

size_t C2S_PG_Kick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.C2S_PG_Kick)
  size_t total_size = 0;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seat_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_PG_Kick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.C2S_PG_Kick)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_PG_Kick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2S_PG_Kick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.C2S_PG_Kick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.C2S_PG_Kick)
    MergeFrom(*source);
  }
}

void C2S_PG_Kick::MergeFrom(const C2S_PG_Kick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.C2S_PG_Kick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seat_id() != 0) {
    set_seat_id(from.seat_id());
  }
}

void C2S_PG_Kick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.C2S_PG_Kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_PG_Kick::CopyFrom(const C2S_PG_Kick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.C2S_PG_Kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_PG_Kick::IsInitialized() const {
  return true;
}

void C2S_PG_Kick::Swap(C2S_PG_Kick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2S_PG_Kick::InternalSwap(C2S_PG_Kick* other) {
  std::swap(seat_id_, other->seat_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2S_PG_Kick::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2S_PG_Kick

// uint32 seat_id = 1;
void C2S_PG_Kick::clear_seat_id() {
  seat_id_ = 0u;
}
::google::protobuf::uint32 C2S_PG_Kick::seat_id() const {
  // @@protoc_insertion_point(field_get:proto3_proto.C2S_PG_Kick.seat_id)
  return seat_id_;
}
void C2S_PG_Kick::set_seat_id(::google::protobuf::uint32 value) {
  
  seat_id_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.C2S_PG_Kick.seat_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2C_PG_Kick::kSeatIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2C_PG_Kick::S2C_PG_Kick()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_paigow_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.S2C_PG_Kick)
}
S2C_PG_Kick::S2C_PG_Kick(const S2C_PG_Kick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  seat_id_ = from.seat_id_;
  // @@protoc_insertion_point(copy_constructor:proto3_proto.S2C_PG_Kick)
}

void S2C_PG_Kick::SharedCtor() {
  seat_id_ = 0u;
  _cached_size_ = 0;
}

S2C_PG_Kick::~S2C_PG_Kick() {
  // @@protoc_insertion_point(destructor:proto3_proto.S2C_PG_Kick)
  SharedDtor();
}

void S2C_PG_Kick::SharedDtor() {
}

void S2C_PG_Kick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_PG_Kick::descriptor() {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2C_PG_Kick& S2C_PG_Kick::default_instance() {
  protobuf_paigow_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2C_PG_Kick* S2C_PG_Kick::New(::google::protobuf::Arena* arena) const {
  S2C_PG_Kick* n = new S2C_PG_Kick;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2C_PG_Kick::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.S2C_PG_Kick)
  seat_id_ = 0u;
}

bool S2C_PG_Kick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.S2C_PG_Kick)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 seat_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.S2C_PG_Kick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.S2C_PG_Kick)
  return false;
#undef DO_
}

void S2C_PG_Kick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.S2C_PG_Kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->seat_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.S2C_PG_Kick)
}

::google::protobuf::uint8* S2C_PG_Kick::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.S2C_PG_Kick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->seat_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.S2C_PG_Kick)
  return target;
}

size_t S2C_PG_Kick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.S2C_PG_Kick)
  size_t total_size = 0;

  // uint32 seat_id = 1;
  if (this->seat_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->seat_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_PG_Kick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.S2C_PG_Kick)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_PG_Kick* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2C_PG_Kick>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.S2C_PG_Kick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.S2C_PG_Kick)
    MergeFrom(*source);
  }
}

void S2C_PG_Kick::MergeFrom(const S2C_PG_Kick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.S2C_PG_Kick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.seat_id() != 0) {
    set_seat_id(from.seat_id());
  }
}

void S2C_PG_Kick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.S2C_PG_Kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_PG_Kick::CopyFrom(const S2C_PG_Kick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.S2C_PG_Kick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_PG_Kick::IsInitialized() const {
  return true;
}

void S2C_PG_Kick::Swap(S2C_PG_Kick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2C_PG_Kick::InternalSwap(S2C_PG_Kick* other) {
  std::swap(seat_id_, other->seat_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2C_PG_Kick::GetMetadata() const {
  protobuf_paigow_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_paigow_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2C_PG_Kick

// uint32 seat_id = 1;
void S2C_PG_Kick::clear_seat_id() {
  seat_id_ = 0u;
}
::google::protobuf::uint32 S2C_PG_Kick::seat_id() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_PG_Kick.seat_id)
  return seat_id_;
}
void S2C_PG_Kick::set_seat_id(::google::protobuf::uint32 value) {
  
  seat_id_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_PG_Kick.seat_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto3_proto

// @@protoc_insertion_point(global_scope)
