// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "test.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto3_proto {
class MessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Message> {
} _Message_default_instance_;
class AckDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Ack> {
} _Ack_default_instance_;
class UserInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserInfo> {
} _UserInfo_default_instance_;
class S2C_InitUserInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2C_InitUserInfo> {
} _S2C_InitUserInfo_default_instance_;
class MatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Match> {
} _Match_default_instance_;
class PaiGowParamsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PaiGowParams> {
} _PaiGowParams_default_instance_;
class C2S_CreateMatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<C2S_CreateMatch> {
} _C2S_CreateMatch_default_instance_;
class S2C_CreateMatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2C_CreateMatch> {
} _S2C_CreateMatch_default_instance_;
class PaiGowTableDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PaiGowTable> {
} _PaiGowTable_default_instance_;
class S2C_TableSnapshotDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<S2C_TableSnapshot> {
} _S2C_TableSnapshot_default_instance_;

namespace protobuf_test_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[10];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Message, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ack, status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, head_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, card_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_InitUserInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_InitUserInfo, user_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, room_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, round_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, paigow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Match, users_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CreateMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CreateMatch, for_other_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CreateMatch, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CreateMatch, number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CreateMatch, cost_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(C2S_CreateMatch, paigow_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_CreateMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_CreateMatch, code_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_CreateMatch, for_other_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_CreateMatch, match_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PaiGowTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TableSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TableSnapshot, match_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(S2C_TableSnapshot, paigpow_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Message)},
  { 7, -1, sizeof(Ack)},
  { 13, -1, sizeof(UserInfo)},
  { 22, -1, sizeof(S2C_InitUserInfo)},
  { 28, -1, sizeof(Match)},
  { 42, -1, sizeof(PaiGowParams)},
  { 47, -1, sizeof(C2S_CreateMatch)},
  { 57, -1, sizeof(S2C_CreateMatch)},
  { 65, -1, sizeof(PaiGowTable)},
  { 70, -1, sizeof(S2C_TableSnapshot)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Ack_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_UserInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2C_InitUserInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Match_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PaiGowParams_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_C2S_CreateMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2C_CreateMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PaiGowTable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_S2C_TableSnapshot_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "test.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 10);
}

}  // namespace

void TableStruct::Shutdown() {
  _Message_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Ack_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _UserInfo_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _S2C_InitUserInfo_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Match_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _PaiGowParams_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _C2S_CreateMatch_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _S2C_CreateMatch_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _PaiGowTable_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _S2C_TableSnapshot_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Message_default_instance_.DefaultConstruct();
  _Ack_default_instance_.DefaultConstruct();
  _UserInfo_default_instance_.DefaultConstruct();
  _S2C_InitUserInfo_default_instance_.DefaultConstruct();
  _Match_default_instance_.DefaultConstruct();
  _PaiGowParams_default_instance_.DefaultConstruct();
  _C2S_CreateMatch_default_instance_.DefaultConstruct();
  _S2C_CreateMatch_default_instance_.DefaultConstruct();
  _PaiGowTable_default_instance_.DefaultConstruct();
  _S2C_TableSnapshot_default_instance_.DefaultConstruct();
  _S2C_InitUserInfo_default_instance_.get_mutable()->user_ = const_cast< ::proto3_proto::UserInfo*>(
      ::proto3_proto::UserInfo::internal_default_instance());
  _Match_default_instance_.get_mutable()->paigow_ = const_cast< ::proto3_proto::PaiGowParams*>(
      ::proto3_proto::PaiGowParams::internal_default_instance());
  _C2S_CreateMatch_default_instance_.get_mutable()->paigow_ = const_cast< ::proto3_proto::PaiGowParams*>(
      ::proto3_proto::PaiGowParams::internal_default_instance());
  _S2C_CreateMatch_default_instance_.get_mutable()->match_ = const_cast< ::proto3_proto::Match*>(
      ::proto3_proto::Match::internal_default_instance());
  _S2C_TableSnapshot_default_instance_.get_mutable()->match_ = const_cast< ::proto3_proto::Match*>(
      ::proto3_proto::Match::internal_default_instance());
  _S2C_TableSnapshot_default_instance_.get_mutable()->paigpow_ = const_cast< ::proto3_proto::PaiGowTable*>(
      ::proto3_proto::PaiGowTable::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\ntest.proto\022\014proto3_proto\"#\n\007Message\022\014\n"
      "\004name\030\001 \001(\t\022\n\n\002id\030\002 \001(\005\"\025\n\003Ack\022\016\n\006status"
      "\030\001 \001(\005\"@\n\010UserInfo\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002"
      " \001(\t\022\014\n\004head\030\003 \001(\t\022\014\n\004card\030\004 \001(\005\"8\n\020S2C_"
      "InitUserInfo\022$\n\004user\030\001 \001(\0132\026.proto3_prot"
      "o.UserInfo\"\303\001\n\005Match\022\017\n\007room_id\030\001 \001(\005\022\014\n"
      "\004type\030\002 \001(\005\022\014\n\004time\030\003 \001(\003\022\016\n\006number\030\004 \001("
      "\005\022\014\n\004cost\030\005 \001(\005\022\r\n\005state\030\006 \001(\005\022\r\n\005round\030"
      "\007 \001(\005\022*\n\006paigow\030\010 \001(\0132\032.proto3_proto.Pai"
      "GowParams\022%\n\005users\030\t \003(\0132\026.proto3_proto."
      "UserInfo\"\016\n\014PaiGowParams\"|\n\017C2S_CreateMa"
      "tch\022\021\n\tfor_other\030\001 \001(\010\022\014\n\004type\030\002 \001(\005\022\016\n\006"
      "number\030\003 \001(\005\022\014\n\004cost\030\004 \001(\005\022*\n\006paigow\030\005 \001"
      "(\0132\032.proto3_proto.PaiGowParams\"V\n\017S2C_Cr"
      "eateMatch\022\014\n\004code\030\001 \001(\005\022\021\n\tfor_other\030\002 \001"
      "(\010\022\"\n\005match\030\003 \001(\0132\023.proto3_proto.Match\"\r"
      "\n\013PaiGowTable\"c\n\021S2C_TableSnapshot\022\"\n\005ma"
      "tch\030\001 \001(\0132\023.proto3_proto.Match\022*\n\007paigpo"
      "w\030\002 \001(\0132\031.proto3_proto.PaiGowTableb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 762);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "test.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_test_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Message::kNameFieldNumber;
const int Message::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Message::Message()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.Message)
}
Message::Message(const Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto3_proto.Message)
}

void Message::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  _cached_size_ = 0;
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:proto3_proto.Message)
  SharedDtor();
}

void Message::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Message::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Message& Message::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

Message* Message::New(::google::protobuf::Arena* arena) const {
  Message* n = new Message;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.Message)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

bool Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.Message)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3_proto.Message.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.Message)
  return false;
#undef DO_
}

void Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3_proto.Message.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.Message)
}

::google::protobuf::uint8* Message::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3_proto.Message.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 id = 2;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.Message)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 id = 2;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Message>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::Swap(Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Message::InternalSwap(Message* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Message::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Message

// string name = 1;
void Message::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Message::name() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Message.name)
  return name_.GetNoArena();
}
void Message::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3_proto.Message.name)
}
#if LANG_CXX11
void Message::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto3_proto.Message.name)
}
#endif
void Message::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3_proto.Message.name)
}
void Message::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3_proto.Message.name)
}
::std::string* Message::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto3_proto.Message.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Message::release_name() {
  // @@protoc_insertion_point(field_release:proto3_proto.Message.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Message::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto3_proto.Message.name)
}

// int32 id = 2;
void Message::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 Message::id() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Message.id)
  return id_;
}
void Message::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.Message.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Ack::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Ack::Ack()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.Ack)
}
Ack::Ack(const Ack& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:proto3_proto.Ack)
}

void Ack::SharedCtor() {
  status_ = 0;
  _cached_size_ = 0;
}

Ack::~Ack() {
  // @@protoc_insertion_point(destructor:proto3_proto.Ack)
  SharedDtor();
}

void Ack::SharedDtor() {
}

void Ack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ack::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Ack& Ack::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

Ack* Ack::New(::google::protobuf::Arena* arena) const {
  Ack* n = new Ack;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.Ack)
  status_ = 0;
}

bool Ack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.Ack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.Ack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.Ack)
  return false;
#undef DO_
}

void Ack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.Ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.Ack)
}

::google::protobuf::uint8* Ack::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.Ack)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.Ack)
  return target;
}

size_t Ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.Ack)
  size_t total_size = 0;

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ack::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.Ack)
  GOOGLE_DCHECK_NE(&from, this);
  const Ack* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Ack>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.Ack)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.Ack)
    MergeFrom(*source);
  }
}

void Ack::MergeFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.Ack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    set_status(from.status());
  }
}

void Ack::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ack::CopyFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ack::IsInitialized() const {
  return true;
}

void Ack::Swap(Ack* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Ack::InternalSwap(Ack* other) {
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Ack::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Ack

// int32 status = 1;
void Ack::clear_status() {
  status_ = 0;
}
::google::protobuf::int32 Ack::status() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Ack.status)
  return status_;
}
void Ack::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.Ack.status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserInfo::kIdFieldNumber;
const int UserInfo::kNameFieldNumber;
const int UserInfo::kHeadFieldNumber;
const int UserInfo::kCardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserInfo::UserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.UserInfo)
}
UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  head_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.head().size() > 0) {
    head_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.head_);
  }
  card_ = from.card_;
  // @@protoc_insertion_point(copy_constructor:proto3_proto.UserInfo)
}

void UserInfo::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_ = 0;
  _cached_size_ = 0;
}

UserInfo::~UserInfo() {
  // @@protoc_insertion_point(destructor:proto3_proto.UserInfo)
  SharedDtor();
}

void UserInfo::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserInfo& UserInfo::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserInfo* UserInfo::New(::google::protobuf::Arena* arena) const {
  UserInfo* n = new UserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.UserInfo)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  head_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  card_ = 0;
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.UserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3_proto.UserInfo.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3_proto.UserInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string head = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_head()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->head().data(), this->head().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto3_proto.UserInfo.head"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 card = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &card_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.UserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.UserInfo)
  return false;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3_proto.UserInfo.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3_proto.UserInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string head = 3;
  if (this->head().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3_proto.UserInfo.head");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->head(), output);
  }

  // int32 card = 4;
  if (this->card() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->card(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.UserInfo)
}

::google::protobuf::uint8* UserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.UserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3_proto.UserInfo.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3_proto.UserInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // string head = 3;
  if (this->head().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->head().data(), this->head().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto3_proto.UserInfo.head");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->head(), target);
  }

  // int32 card = 4;
  if (this->card() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->card(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.UserInfo)
  return target;
}

size_t UserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.UserInfo)
  size_t total_size = 0;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string head = 3;
  if (this->head().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->head());
  }

  // int32 card = 4;
  if (this->card() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->card());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const UserInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.UserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.UserInfo)
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.UserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.head().size() > 0) {

    head_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.head_);
  }
  if (from.card() != 0) {
    set_card(from.card());
  }
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.UserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {
  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserInfo::InternalSwap(UserInfo* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  head_.Swap(&other->head_);
  std::swap(card_, other->card_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserInfo

// string id = 1;
void UserInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserInfo::id() const {
  // @@protoc_insertion_point(field_get:proto3_proto.UserInfo.id)
  return id_.GetNoArena();
}
void UserInfo::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3_proto.UserInfo.id)
}
#if LANG_CXX11
void UserInfo::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto3_proto.UserInfo.id)
}
#endif
void UserInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3_proto.UserInfo.id)
}
void UserInfo::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3_proto.UserInfo.id)
}
::std::string* UserInfo::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:proto3_proto.UserInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_id() {
  // @@protoc_insertion_point(field_release:proto3_proto.UserInfo.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:proto3_proto.UserInfo.id)
}

// string name = 2;
void UserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserInfo::name() const {
  // @@protoc_insertion_point(field_get:proto3_proto.UserInfo.name)
  return name_.GetNoArena();
}
void UserInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3_proto.UserInfo.name)
}
#if LANG_CXX11
void UserInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto3_proto.UserInfo.name)
}
#endif
void UserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3_proto.UserInfo.name)
}
void UserInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3_proto.UserInfo.name)
}
::std::string* UserInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto3_proto.UserInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_name() {
  // @@protoc_insertion_point(field_release:proto3_proto.UserInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto3_proto.UserInfo.name)
}

// string head = 3;
void UserInfo::clear_head() {
  head_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UserInfo::head() const {
  // @@protoc_insertion_point(field_get:proto3_proto.UserInfo.head)
  return head_.GetNoArena();
}
void UserInfo::set_head(const ::std::string& value) {
  
  head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto3_proto.UserInfo.head)
}
#if LANG_CXX11
void UserInfo::set_head(::std::string&& value) {
  
  head_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto3_proto.UserInfo.head)
}
#endif
void UserInfo::set_head(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto3_proto.UserInfo.head)
}
void UserInfo::set_head(const char* value, size_t size) {
  
  head_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto3_proto.UserInfo.head)
}
::std::string* UserInfo::mutable_head() {
  
  // @@protoc_insertion_point(field_mutable:proto3_proto.UserInfo.head)
  return head_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UserInfo::release_head() {
  // @@protoc_insertion_point(field_release:proto3_proto.UserInfo.head)
  
  return head_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UserInfo::set_allocated_head(::std::string* head) {
  if (head != NULL) {
    
  } else {
    
  }
  head_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), head);
  // @@protoc_insertion_point(field_set_allocated:proto3_proto.UserInfo.head)
}

// int32 card = 4;
void UserInfo::clear_card() {
  card_ = 0;
}
::google::protobuf::int32 UserInfo::card() const {
  // @@protoc_insertion_point(field_get:proto3_proto.UserInfo.card)
  return card_;
}
void UserInfo::set_card(::google::protobuf::int32 value) {
  
  card_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.UserInfo.card)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2C_InitUserInfo::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2C_InitUserInfo::S2C_InitUserInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.S2C_InitUserInfo)
}
S2C_InitUserInfo::S2C_InitUserInfo(const S2C_InitUserInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::proto3_proto::UserInfo(*from.user_);
  } else {
    user_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto3_proto.S2C_InitUserInfo)
}

void S2C_InitUserInfo::SharedCtor() {
  user_ = NULL;
  _cached_size_ = 0;
}

S2C_InitUserInfo::~S2C_InitUserInfo() {
  // @@protoc_insertion_point(destructor:proto3_proto.S2C_InitUserInfo)
  SharedDtor();
}

void S2C_InitUserInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete user_;
  }
}

void S2C_InitUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_InitUserInfo::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2C_InitUserInfo& S2C_InitUserInfo::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2C_InitUserInfo* S2C_InitUserInfo::New(::google::protobuf::Arena* arena) const {
  S2C_InitUserInfo* n = new S2C_InitUserInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2C_InitUserInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.S2C_InitUserInfo)
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
}

bool S2C_InitUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.S2C_InitUserInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto3_proto.UserInfo user = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.S2C_InitUserInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.S2C_InitUserInfo)
  return false;
#undef DO_
}

void S2C_InitUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.S2C_InitUserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto3_proto.UserInfo user = 1;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->user_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.S2C_InitUserInfo)
}

::google::protobuf::uint8* S2C_InitUserInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.S2C_InitUserInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto3_proto.UserInfo user = 1;
  if (this->has_user()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->user_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.S2C_InitUserInfo)
  return target;
}

size_t S2C_InitUserInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.S2C_InitUserInfo)
  size_t total_size = 0;

  // .proto3_proto.UserInfo user = 1;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_InitUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.S2C_InitUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_InitUserInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2C_InitUserInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.S2C_InitUserInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.S2C_InitUserInfo)
    MergeFrom(*source);
  }
}

void S2C_InitUserInfo::MergeFrom(const S2C_InitUserInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.S2C_InitUserInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user()) {
    mutable_user()->::proto3_proto::UserInfo::MergeFrom(from.user());
  }
}

void S2C_InitUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.S2C_InitUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_InitUserInfo::CopyFrom(const S2C_InitUserInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.S2C_InitUserInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_InitUserInfo::IsInitialized() const {
  return true;
}

void S2C_InitUserInfo::Swap(S2C_InitUserInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2C_InitUserInfo::InternalSwap(S2C_InitUserInfo* other) {
  std::swap(user_, other->user_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2C_InitUserInfo::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2C_InitUserInfo

// .proto3_proto.UserInfo user = 1;
bool S2C_InitUserInfo::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
void S2C_InitUserInfo::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
const ::proto3_proto::UserInfo& S2C_InitUserInfo::user() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_InitUserInfo.user)
  return user_ != NULL ? *user_
                         : *::proto3_proto::UserInfo::internal_default_instance();
}
::proto3_proto::UserInfo* S2C_InitUserInfo::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::proto3_proto::UserInfo;
  }
  // @@protoc_insertion_point(field_mutable:proto3_proto.S2C_InitUserInfo.user)
  return user_;
}
::proto3_proto::UserInfo* S2C_InitUserInfo::release_user() {
  // @@protoc_insertion_point(field_release:proto3_proto.S2C_InitUserInfo.user)
  
  ::proto3_proto::UserInfo* temp = user_;
  user_ = NULL;
  return temp;
}
void S2C_InitUserInfo::set_allocated_user(::proto3_proto::UserInfo* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3_proto.S2C_InitUserInfo.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Match::kRoomIdFieldNumber;
const int Match::kTypeFieldNumber;
const int Match::kTimeFieldNumber;
const int Match::kNumberFieldNumber;
const int Match::kCostFieldNumber;
const int Match::kStateFieldNumber;
const int Match::kRoundFieldNumber;
const int Match::kPaigowFieldNumber;
const int Match::kUsersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Match::Match()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.Match)
}
Match::Match(const Match& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      users_(from.users_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_paigow()) {
    paigow_ = new ::proto3_proto::PaiGowParams(*from.paigow_);
  } else {
    paigow_ = NULL;
  }
  ::memcpy(&room_id_, &from.room_id_,
    reinterpret_cast<char*>(&round_) -
    reinterpret_cast<char*>(&room_id_) + sizeof(round_));
  // @@protoc_insertion_point(copy_constructor:proto3_proto.Match)
}

void Match::SharedCtor() {
  ::memset(&paigow_, 0, reinterpret_cast<char*>(&round_) -
    reinterpret_cast<char*>(&paigow_) + sizeof(round_));
  _cached_size_ = 0;
}

Match::~Match() {
  // @@protoc_insertion_point(destructor:proto3_proto.Match)
  SharedDtor();
}

void Match::SharedDtor() {
  if (this != internal_default_instance()) {
    delete paigow_;
  }
}

void Match::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Match::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Match& Match::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

Match* Match::New(::google::protobuf::Arena* arena) const {
  Match* n = new Match;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Match::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.Match)
  users_.Clear();
  if (GetArenaNoVirtual() == NULL && paigow_ != NULL) {
    delete paigow_;
  }
  paigow_ = NULL;
  ::memset(&room_id_, 0, reinterpret_cast<char*>(&round_) -
    reinterpret_cast<char*>(&room_id_) + sizeof(round_));
}

bool Match::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.Match)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 room_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &room_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cost = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 state = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 round = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto3_proto.PaiGowParams paigow = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paigow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto3_proto.UserInfo users = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.Match)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.Match)
  return false;
#undef DO_
}

void Match::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.Match)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->room_id(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // int64 time = 3;
  if (this->time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // int32 number = 4;
  if (this->number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->number(), output);
  }

  // int32 cost = 5;
  if (this->cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cost(), output);
  }

  // int32 state = 6;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->state(), output);
  }

  // int32 round = 7;
  if (this->round() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->round(), output);
  }

  // .proto3_proto.PaiGowParams paigow = 8;
  if (this->has_paigow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->paigow_, output);
  }

  // repeated .proto3_proto.UserInfo users = 9;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->users(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.Match)
}

::google::protobuf::uint8* Match::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.Match)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->room_id(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // int64 time = 3;
  if (this->time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // int32 number = 4;
  if (this->number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->number(), target);
  }

  // int32 cost = 5;
  if (this->cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cost(), target);
  }

  // int32 state = 6;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->state(), target);
  }

  // int32 round = 7;
  if (this->round() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->round(), target);
  }

  // .proto3_proto.PaiGowParams paigow = 8;
  if (this->has_paigow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->paigow_, deterministic, target);
  }

  // repeated .proto3_proto.UserInfo users = 9;
  for (unsigned int i = 0, n = this->users_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, this->users(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.Match)
  return target;
}

size_t Match::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.Match)
  size_t total_size = 0;

  // repeated .proto3_proto.UserInfo users = 9;
  {
    unsigned int count = this->users_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->users(i));
    }
  }

  // .proto3_proto.PaiGowParams paigow = 8;
  if (this->has_paigow()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->paigow_);
  }

  // int32 room_id = 1;
  if (this->room_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->room_id());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int64 time = 3;
  if (this->time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->time());
  }

  // int32 number = 4;
  if (this->number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number());
  }

  // int32 cost = 5;
  if (this->cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cost());
  }

  // int32 state = 6;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->state());
  }

  // int32 round = 7;
  if (this->round() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->round());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Match::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.Match)
  GOOGLE_DCHECK_NE(&from, this);
  const Match* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Match>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.Match)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.Match)
    MergeFrom(*source);
  }
}

void Match::MergeFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.Match)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  users_.MergeFrom(from.users_);
  if (from.has_paigow()) {
    mutable_paigow()->::proto3_proto::PaiGowParams::MergeFrom(from.paigow());
  }
  if (from.room_id() != 0) {
    set_room_id(from.room_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.time() != 0) {
    set_time(from.time());
  }
  if (from.number() != 0) {
    set_number(from.number());
  }
  if (from.cost() != 0) {
    set_cost(from.cost());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.round() != 0) {
    set_round(from.round());
  }
}

void Match::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Match::CopyFrom(const Match& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.Match)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Match::IsInitialized() const {
  return true;
}

void Match::Swap(Match* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Match::InternalSwap(Match* other) {
  users_.InternalSwap(&other->users_);
  std::swap(paigow_, other->paigow_);
  std::swap(room_id_, other->room_id_);
  std::swap(type_, other->type_);
  std::swap(time_, other->time_);
  std::swap(number_, other->number_);
  std::swap(cost_, other->cost_);
  std::swap(state_, other->state_);
  std::swap(round_, other->round_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Match::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Match

// int32 room_id = 1;
void Match::clear_room_id() {
  room_id_ = 0;
}
::google::protobuf::int32 Match::room_id() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Match.room_id)
  return room_id_;
}
void Match::set_room_id(::google::protobuf::int32 value) {
  
  room_id_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.Match.room_id)
}

// int32 type = 2;
void Match::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 Match::type() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Match.type)
  return type_;
}
void Match::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.Match.type)
}

// int64 time = 3;
void Match::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Match::time() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Match.time)
  return time_;
}
void Match::set_time(::google::protobuf::int64 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.Match.time)
}

// int32 number = 4;
void Match::clear_number() {
  number_ = 0;
}
::google::protobuf::int32 Match::number() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Match.number)
  return number_;
}
void Match::set_number(::google::protobuf::int32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.Match.number)
}

// int32 cost = 5;
void Match::clear_cost() {
  cost_ = 0;
}
::google::protobuf::int32 Match::cost() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Match.cost)
  return cost_;
}
void Match::set_cost(::google::protobuf::int32 value) {
  
  cost_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.Match.cost)
}

// int32 state = 6;
void Match::clear_state() {
  state_ = 0;
}
::google::protobuf::int32 Match::state() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Match.state)
  return state_;
}
void Match::set_state(::google::protobuf::int32 value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.Match.state)
}

// int32 round = 7;
void Match::clear_round() {
  round_ = 0;
}
::google::protobuf::int32 Match::round() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Match.round)
  return round_;
}
void Match::set_round(::google::protobuf::int32 value) {
  
  round_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.Match.round)
}

// .proto3_proto.PaiGowParams paigow = 8;
bool Match::has_paigow() const {
  return this != internal_default_instance() && paigow_ != NULL;
}
void Match::clear_paigow() {
  if (GetArenaNoVirtual() == NULL && paigow_ != NULL) delete paigow_;
  paigow_ = NULL;
}
const ::proto3_proto::PaiGowParams& Match::paigow() const {
  // @@protoc_insertion_point(field_get:proto3_proto.Match.paigow)
  return paigow_ != NULL ? *paigow_
                         : *::proto3_proto::PaiGowParams::internal_default_instance();
}
::proto3_proto::PaiGowParams* Match::mutable_paigow() {
  
  if (paigow_ == NULL) {
    paigow_ = new ::proto3_proto::PaiGowParams;
  }
  // @@protoc_insertion_point(field_mutable:proto3_proto.Match.paigow)
  return paigow_;
}
::proto3_proto::PaiGowParams* Match::release_paigow() {
  // @@protoc_insertion_point(field_release:proto3_proto.Match.paigow)
  
  ::proto3_proto::PaiGowParams* temp = paigow_;
  paigow_ = NULL;
  return temp;
}
void Match::set_allocated_paigow(::proto3_proto::PaiGowParams* paigow) {
  delete paigow_;
  paigow_ = paigow;
  if (paigow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3_proto.Match.paigow)
}

// repeated .proto3_proto.UserInfo users = 9;
int Match::users_size() const {
  return users_.size();
}
void Match::clear_users() {
  users_.Clear();
}
const ::proto3_proto::UserInfo& Match::users(int index) const {
  // @@protoc_insertion_point(field_get:proto3_proto.Match.users)
  return users_.Get(index);
}
::proto3_proto::UserInfo* Match::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:proto3_proto.Match.users)
  return users_.Mutable(index);
}
::proto3_proto::UserInfo* Match::add_users() {
  // @@protoc_insertion_point(field_add:proto3_proto.Match.users)
  return users_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto3_proto::UserInfo >*
Match::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:proto3_proto.Match.users)
  return &users_;
}
const ::google::protobuf::RepeatedPtrField< ::proto3_proto::UserInfo >&
Match::users() const {
  // @@protoc_insertion_point(field_list:proto3_proto.Match.users)
  return users_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PaiGowParams::PaiGowParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.PaiGowParams)
}
PaiGowParams::PaiGowParams(const PaiGowParams& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto3_proto.PaiGowParams)
}

void PaiGowParams::SharedCtor() {
  _cached_size_ = 0;
}

PaiGowParams::~PaiGowParams() {
  // @@protoc_insertion_point(destructor:proto3_proto.PaiGowParams)
  SharedDtor();
}

void PaiGowParams::SharedDtor() {
}

void PaiGowParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PaiGowParams::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PaiGowParams& PaiGowParams::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

PaiGowParams* PaiGowParams::New(::google::protobuf::Arena* arena) const {
  PaiGowParams* n = new PaiGowParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PaiGowParams::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.PaiGowParams)
}

bool PaiGowParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.PaiGowParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.PaiGowParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.PaiGowParams)
  return false;
#undef DO_
}

void PaiGowParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.PaiGowParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:proto3_proto.PaiGowParams)
}

::google::protobuf::uint8* PaiGowParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.PaiGowParams)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.PaiGowParams)
  return target;
}

size_t PaiGowParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.PaiGowParams)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaiGowParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.PaiGowParams)
  GOOGLE_DCHECK_NE(&from, this);
  const PaiGowParams* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PaiGowParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.PaiGowParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.PaiGowParams)
    MergeFrom(*source);
  }
}

void PaiGowParams::MergeFrom(const PaiGowParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.PaiGowParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PaiGowParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.PaiGowParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaiGowParams::CopyFrom(const PaiGowParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.PaiGowParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaiGowParams::IsInitialized() const {
  return true;
}

void PaiGowParams::Swap(PaiGowParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PaiGowParams::InternalSwap(PaiGowParams* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PaiGowParams::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PaiGowParams

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int C2S_CreateMatch::kForOtherFieldNumber;
const int C2S_CreateMatch::kTypeFieldNumber;
const int C2S_CreateMatch::kNumberFieldNumber;
const int C2S_CreateMatch::kCostFieldNumber;
const int C2S_CreateMatch::kPaigowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

C2S_CreateMatch::C2S_CreateMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.C2S_CreateMatch)
}
C2S_CreateMatch::C2S_CreateMatch(const C2S_CreateMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_paigow()) {
    paigow_ = new ::proto3_proto::PaiGowParams(*from.paigow_);
  } else {
    paigow_ = NULL;
  }
  ::memcpy(&for_other_, &from.for_other_,
    reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&for_other_) + sizeof(cost_));
  // @@protoc_insertion_point(copy_constructor:proto3_proto.C2S_CreateMatch)
}

void C2S_CreateMatch::SharedCtor() {
  ::memset(&paigow_, 0, reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&paigow_) + sizeof(cost_));
  _cached_size_ = 0;
}

C2S_CreateMatch::~C2S_CreateMatch() {
  // @@protoc_insertion_point(destructor:proto3_proto.C2S_CreateMatch)
  SharedDtor();
}

void C2S_CreateMatch::SharedDtor() {
  if (this != internal_default_instance()) {
    delete paigow_;
  }
}

void C2S_CreateMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* C2S_CreateMatch::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const C2S_CreateMatch& C2S_CreateMatch::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

C2S_CreateMatch* C2S_CreateMatch::New(::google::protobuf::Arena* arena) const {
  C2S_CreateMatch* n = new C2S_CreateMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void C2S_CreateMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.C2S_CreateMatch)
  if (GetArenaNoVirtual() == NULL && paigow_ != NULL) {
    delete paigow_;
  }
  paigow_ = NULL;
  ::memset(&for_other_, 0, reinterpret_cast<char*>(&cost_) -
    reinterpret_cast<char*>(&for_other_) + sizeof(cost_));
}

bool C2S_CreateMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.C2S_CreateMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool for_other = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &for_other_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 number = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 cost = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto3_proto.PaiGowParams paigow = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paigow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.C2S_CreateMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.C2S_CreateMatch)
  return false;
#undef DO_
}

void C2S_CreateMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.C2S_CreateMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool for_other = 1;
  if (this->for_other() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->for_other(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // int32 number = 3;
  if (this->number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->number(), output);
  }

  // int32 cost = 4;
  if (this->cost() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cost(), output);
  }

  // .proto3_proto.PaiGowParams paigow = 5;
  if (this->has_paigow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->paigow_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.C2S_CreateMatch)
}

::google::protobuf::uint8* C2S_CreateMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.C2S_CreateMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool for_other = 1;
  if (this->for_other() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->for_other(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // int32 number = 3;
  if (this->number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->number(), target);
  }

  // int32 cost = 4;
  if (this->cost() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cost(), target);
  }

  // .proto3_proto.PaiGowParams paigow = 5;
  if (this->has_paigow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->paigow_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.C2S_CreateMatch)
  return target;
}

size_t C2S_CreateMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.C2S_CreateMatch)
  size_t total_size = 0;

  // .proto3_proto.PaiGowParams paigow = 5;
  if (this->has_paigow()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->paigow_);
  }

  // bool for_other = 1;
  if (this->for_other() != 0) {
    total_size += 1 + 1;
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 number = 3;
  if (this->number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->number());
  }

  // int32 cost = 4;
  if (this->cost() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cost());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void C2S_CreateMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.C2S_CreateMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const C2S_CreateMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const C2S_CreateMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.C2S_CreateMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.C2S_CreateMatch)
    MergeFrom(*source);
  }
}

void C2S_CreateMatch::MergeFrom(const C2S_CreateMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.C2S_CreateMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_paigow()) {
    mutable_paigow()->::proto3_proto::PaiGowParams::MergeFrom(from.paigow());
  }
  if (from.for_other() != 0) {
    set_for_other(from.for_other());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.number() != 0) {
    set_number(from.number());
  }
  if (from.cost() != 0) {
    set_cost(from.cost());
  }
}

void C2S_CreateMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.C2S_CreateMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void C2S_CreateMatch::CopyFrom(const C2S_CreateMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.C2S_CreateMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C2S_CreateMatch::IsInitialized() const {
  return true;
}

void C2S_CreateMatch::Swap(C2S_CreateMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void C2S_CreateMatch::InternalSwap(C2S_CreateMatch* other) {
  std::swap(paigow_, other->paigow_);
  std::swap(for_other_, other->for_other_);
  std::swap(type_, other->type_);
  std::swap(number_, other->number_);
  std::swap(cost_, other->cost_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata C2S_CreateMatch::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// C2S_CreateMatch

// bool for_other = 1;
void C2S_CreateMatch::clear_for_other() {
  for_other_ = false;
}
bool C2S_CreateMatch::for_other() const {
  // @@protoc_insertion_point(field_get:proto3_proto.C2S_CreateMatch.for_other)
  return for_other_;
}
void C2S_CreateMatch::set_for_other(bool value) {
  
  for_other_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.C2S_CreateMatch.for_other)
}

// int32 type = 2;
void C2S_CreateMatch::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 C2S_CreateMatch::type() const {
  // @@protoc_insertion_point(field_get:proto3_proto.C2S_CreateMatch.type)
  return type_;
}
void C2S_CreateMatch::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.C2S_CreateMatch.type)
}

// int32 number = 3;
void C2S_CreateMatch::clear_number() {
  number_ = 0;
}
::google::protobuf::int32 C2S_CreateMatch::number() const {
  // @@protoc_insertion_point(field_get:proto3_proto.C2S_CreateMatch.number)
  return number_;
}
void C2S_CreateMatch::set_number(::google::protobuf::int32 value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.C2S_CreateMatch.number)
}

// int32 cost = 4;
void C2S_CreateMatch::clear_cost() {
  cost_ = 0;
}
::google::protobuf::int32 C2S_CreateMatch::cost() const {
  // @@protoc_insertion_point(field_get:proto3_proto.C2S_CreateMatch.cost)
  return cost_;
}
void C2S_CreateMatch::set_cost(::google::protobuf::int32 value) {
  
  cost_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.C2S_CreateMatch.cost)
}

// .proto3_proto.PaiGowParams paigow = 5;
bool C2S_CreateMatch::has_paigow() const {
  return this != internal_default_instance() && paigow_ != NULL;
}
void C2S_CreateMatch::clear_paigow() {
  if (GetArenaNoVirtual() == NULL && paigow_ != NULL) delete paigow_;
  paigow_ = NULL;
}
const ::proto3_proto::PaiGowParams& C2S_CreateMatch::paigow() const {
  // @@protoc_insertion_point(field_get:proto3_proto.C2S_CreateMatch.paigow)
  return paigow_ != NULL ? *paigow_
                         : *::proto3_proto::PaiGowParams::internal_default_instance();
}
::proto3_proto::PaiGowParams* C2S_CreateMatch::mutable_paigow() {
  
  if (paigow_ == NULL) {
    paigow_ = new ::proto3_proto::PaiGowParams;
  }
  // @@protoc_insertion_point(field_mutable:proto3_proto.C2S_CreateMatch.paigow)
  return paigow_;
}
::proto3_proto::PaiGowParams* C2S_CreateMatch::release_paigow() {
  // @@protoc_insertion_point(field_release:proto3_proto.C2S_CreateMatch.paigow)
  
  ::proto3_proto::PaiGowParams* temp = paigow_;
  paigow_ = NULL;
  return temp;
}
void C2S_CreateMatch::set_allocated_paigow(::proto3_proto::PaiGowParams* paigow) {
  delete paigow_;
  paigow_ = paigow;
  if (paigow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3_proto.C2S_CreateMatch.paigow)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2C_CreateMatch::kCodeFieldNumber;
const int S2C_CreateMatch::kForOtherFieldNumber;
const int S2C_CreateMatch::kMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2C_CreateMatch::S2C_CreateMatch()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.S2C_CreateMatch)
}
S2C_CreateMatch::S2C_CreateMatch(const S2C_CreateMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_match()) {
    match_ = new ::proto3_proto::Match(*from.match_);
  } else {
    match_ = NULL;
  }
  ::memcpy(&code_, &from.code_,
    reinterpret_cast<char*>(&for_other_) -
    reinterpret_cast<char*>(&code_) + sizeof(for_other_));
  // @@protoc_insertion_point(copy_constructor:proto3_proto.S2C_CreateMatch)
}

void S2C_CreateMatch::SharedCtor() {
  ::memset(&match_, 0, reinterpret_cast<char*>(&for_other_) -
    reinterpret_cast<char*>(&match_) + sizeof(for_other_));
  _cached_size_ = 0;
}

S2C_CreateMatch::~S2C_CreateMatch() {
  // @@protoc_insertion_point(destructor:proto3_proto.S2C_CreateMatch)
  SharedDtor();
}

void S2C_CreateMatch::SharedDtor() {
  if (this != internal_default_instance()) {
    delete match_;
  }
}

void S2C_CreateMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_CreateMatch::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2C_CreateMatch& S2C_CreateMatch::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2C_CreateMatch* S2C_CreateMatch::New(::google::protobuf::Arena* arena) const {
  S2C_CreateMatch* n = new S2C_CreateMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2C_CreateMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.S2C_CreateMatch)
  if (GetArenaNoVirtual() == NULL && match_ != NULL) {
    delete match_;
  }
  match_ = NULL;
  ::memset(&code_, 0, reinterpret_cast<char*>(&for_other_) -
    reinterpret_cast<char*>(&code_) + sizeof(for_other_));
}

bool S2C_CreateMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.S2C_CreateMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool for_other = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &for_other_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto3_proto.Match match = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.S2C_CreateMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.S2C_CreateMatch)
  return false;
#undef DO_
}

void S2C_CreateMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.S2C_CreateMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // bool for_other = 2;
  if (this->for_other() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->for_other(), output);
  }

  // .proto3_proto.Match match = 3;
  if (this->has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->match_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.S2C_CreateMatch)
}

::google::protobuf::uint8* S2C_CreateMatch::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.S2C_CreateMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 code = 1;
  if (this->code() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // bool for_other = 2;
  if (this->for_other() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->for_other(), target);
  }

  // .proto3_proto.Match match = 3;
  if (this->has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->match_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.S2C_CreateMatch)
  return target;
}

size_t S2C_CreateMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.S2C_CreateMatch)
  size_t total_size = 0;

  // .proto3_proto.Match match = 3;
  if (this->has_match()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->match_);
  }

  // int32 code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->code());
  }

  // bool for_other = 2;
  if (this->for_other() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_CreateMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.S2C_CreateMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_CreateMatch* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2C_CreateMatch>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.S2C_CreateMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.S2C_CreateMatch)
    MergeFrom(*source);
  }
}

void S2C_CreateMatch::MergeFrom(const S2C_CreateMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.S2C_CreateMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_match()) {
    mutable_match()->::proto3_proto::Match::MergeFrom(from.match());
  }
  if (from.code() != 0) {
    set_code(from.code());
  }
  if (from.for_other() != 0) {
    set_for_other(from.for_other());
  }
}

void S2C_CreateMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.S2C_CreateMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_CreateMatch::CopyFrom(const S2C_CreateMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.S2C_CreateMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_CreateMatch::IsInitialized() const {
  return true;
}

void S2C_CreateMatch::Swap(S2C_CreateMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2C_CreateMatch::InternalSwap(S2C_CreateMatch* other) {
  std::swap(match_, other->match_);
  std::swap(code_, other->code_);
  std::swap(for_other_, other->for_other_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2C_CreateMatch::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2C_CreateMatch

// int32 code = 1;
void S2C_CreateMatch::clear_code() {
  code_ = 0;
}
::google::protobuf::int32 S2C_CreateMatch::code() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_CreateMatch.code)
  return code_;
}
void S2C_CreateMatch::set_code(::google::protobuf::int32 value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_CreateMatch.code)
}

// bool for_other = 2;
void S2C_CreateMatch::clear_for_other() {
  for_other_ = false;
}
bool S2C_CreateMatch::for_other() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_CreateMatch.for_other)
  return for_other_;
}
void S2C_CreateMatch::set_for_other(bool value) {
  
  for_other_ = value;
  // @@protoc_insertion_point(field_set:proto3_proto.S2C_CreateMatch.for_other)
}

// .proto3_proto.Match match = 3;
bool S2C_CreateMatch::has_match() const {
  return this != internal_default_instance() && match_ != NULL;
}
void S2C_CreateMatch::clear_match() {
  if (GetArenaNoVirtual() == NULL && match_ != NULL) delete match_;
  match_ = NULL;
}
const ::proto3_proto::Match& S2C_CreateMatch::match() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_CreateMatch.match)
  return match_ != NULL ? *match_
                         : *::proto3_proto::Match::internal_default_instance();
}
::proto3_proto::Match* S2C_CreateMatch::mutable_match() {
  
  if (match_ == NULL) {
    match_ = new ::proto3_proto::Match;
  }
  // @@protoc_insertion_point(field_mutable:proto3_proto.S2C_CreateMatch.match)
  return match_;
}
::proto3_proto::Match* S2C_CreateMatch::release_match() {
  // @@protoc_insertion_point(field_release:proto3_proto.S2C_CreateMatch.match)
  
  ::proto3_proto::Match* temp = match_;
  match_ = NULL;
  return temp;
}
void S2C_CreateMatch::set_allocated_match(::proto3_proto::Match* match) {
  delete match_;
  match_ = match;
  if (match) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3_proto.S2C_CreateMatch.match)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PaiGowTable::PaiGowTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.PaiGowTable)
}
PaiGowTable::PaiGowTable(const PaiGowTable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto3_proto.PaiGowTable)
}

void PaiGowTable::SharedCtor() {
  _cached_size_ = 0;
}

PaiGowTable::~PaiGowTable() {
  // @@protoc_insertion_point(destructor:proto3_proto.PaiGowTable)
  SharedDtor();
}

void PaiGowTable::SharedDtor() {
}

void PaiGowTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PaiGowTable::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PaiGowTable& PaiGowTable::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

PaiGowTable* PaiGowTable::New(::google::protobuf::Arena* arena) const {
  PaiGowTable* n = new PaiGowTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PaiGowTable::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.PaiGowTable)
}

bool PaiGowTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.PaiGowTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.PaiGowTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.PaiGowTable)
  return false;
#undef DO_
}

void PaiGowTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.PaiGowTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_end:proto3_proto.PaiGowTable)
}

::google::protobuf::uint8* PaiGowTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.PaiGowTable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.PaiGowTable)
  return target;
}

size_t PaiGowTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.PaiGowTable)
  size_t total_size = 0;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PaiGowTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.PaiGowTable)
  GOOGLE_DCHECK_NE(&from, this);
  const PaiGowTable* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PaiGowTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.PaiGowTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.PaiGowTable)
    MergeFrom(*source);
  }
}

void PaiGowTable::MergeFrom(const PaiGowTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.PaiGowTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void PaiGowTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.PaiGowTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaiGowTable::CopyFrom(const PaiGowTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.PaiGowTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaiGowTable::IsInitialized() const {
  return true;
}

void PaiGowTable::Swap(PaiGowTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PaiGowTable::InternalSwap(PaiGowTable* other) {
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PaiGowTable::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PaiGowTable

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int S2C_TableSnapshot::kMatchFieldNumber;
const int S2C_TableSnapshot::kPaigpowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

S2C_TableSnapshot::S2C_TableSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_test_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto3_proto.S2C_TableSnapshot)
}
S2C_TableSnapshot::S2C_TableSnapshot(const S2C_TableSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_match()) {
    match_ = new ::proto3_proto::Match(*from.match_);
  } else {
    match_ = NULL;
  }
  if (from.has_paigpow()) {
    paigpow_ = new ::proto3_proto::PaiGowTable(*from.paigpow_);
  } else {
    paigpow_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto3_proto.S2C_TableSnapshot)
}

void S2C_TableSnapshot::SharedCtor() {
  ::memset(&match_, 0, reinterpret_cast<char*>(&paigpow_) -
    reinterpret_cast<char*>(&match_) + sizeof(paigpow_));
  _cached_size_ = 0;
}

S2C_TableSnapshot::~S2C_TableSnapshot() {
  // @@protoc_insertion_point(destructor:proto3_proto.S2C_TableSnapshot)
  SharedDtor();
}

void S2C_TableSnapshot::SharedDtor() {
  if (this != internal_default_instance()) {
    delete match_;
  }
  if (this != internal_default_instance()) {
    delete paigpow_;
  }
}

void S2C_TableSnapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* S2C_TableSnapshot::descriptor() {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const S2C_TableSnapshot& S2C_TableSnapshot::default_instance() {
  protobuf_test_2eproto::InitDefaults();
  return *internal_default_instance();
}

S2C_TableSnapshot* S2C_TableSnapshot::New(::google::protobuf::Arena* arena) const {
  S2C_TableSnapshot* n = new S2C_TableSnapshot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void S2C_TableSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:proto3_proto.S2C_TableSnapshot)
  if (GetArenaNoVirtual() == NULL && match_ != NULL) {
    delete match_;
  }
  match_ = NULL;
  if (GetArenaNoVirtual() == NULL && paigpow_ != NULL) {
    delete paigpow_;
  }
  paigpow_ = NULL;
}

bool S2C_TableSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto3_proto.S2C_TableSnapshot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto3_proto.Match match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto3_proto.PaiGowTable paigpow = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_paigpow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto3_proto.S2C_TableSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto3_proto.S2C_TableSnapshot)
  return false;
#undef DO_
}

void S2C_TableSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto3_proto.S2C_TableSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto3_proto.Match match = 1;
  if (this->has_match()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->match_, output);
  }

  // .proto3_proto.PaiGowTable paigpow = 2;
  if (this->has_paigpow()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->paigpow_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto3_proto.S2C_TableSnapshot)
}

::google::protobuf::uint8* S2C_TableSnapshot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto3_proto.S2C_TableSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .proto3_proto.Match match = 1;
  if (this->has_match()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->match_, deterministic, target);
  }

  // .proto3_proto.PaiGowTable paigpow = 2;
  if (this->has_paigpow()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->paigpow_, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:proto3_proto.S2C_TableSnapshot)
  return target;
}

size_t S2C_TableSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto3_proto.S2C_TableSnapshot)
  size_t total_size = 0;

  // .proto3_proto.Match match = 1;
  if (this->has_match()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->match_);
  }

  // .proto3_proto.PaiGowTable paigpow = 2;
  if (this->has_paigpow()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->paigpow_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void S2C_TableSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto3_proto.S2C_TableSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const S2C_TableSnapshot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const S2C_TableSnapshot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto3_proto.S2C_TableSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto3_proto.S2C_TableSnapshot)
    MergeFrom(*source);
  }
}

void S2C_TableSnapshot::MergeFrom(const S2C_TableSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto3_proto.S2C_TableSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_match()) {
    mutable_match()->::proto3_proto::Match::MergeFrom(from.match());
  }
  if (from.has_paigpow()) {
    mutable_paigpow()->::proto3_proto::PaiGowTable::MergeFrom(from.paigpow());
  }
}

void S2C_TableSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto3_proto.S2C_TableSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void S2C_TableSnapshot::CopyFrom(const S2C_TableSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto3_proto.S2C_TableSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S2C_TableSnapshot::IsInitialized() const {
  return true;
}

void S2C_TableSnapshot::Swap(S2C_TableSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void S2C_TableSnapshot::InternalSwap(S2C_TableSnapshot* other) {
  std::swap(match_, other->match_);
  std::swap(paigpow_, other->paigpow_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata S2C_TableSnapshot::GetMetadata() const {
  protobuf_test_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_test_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// S2C_TableSnapshot

// .proto3_proto.Match match = 1;
bool S2C_TableSnapshot::has_match() const {
  return this != internal_default_instance() && match_ != NULL;
}
void S2C_TableSnapshot::clear_match() {
  if (GetArenaNoVirtual() == NULL && match_ != NULL) delete match_;
  match_ = NULL;
}
const ::proto3_proto::Match& S2C_TableSnapshot::match() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_TableSnapshot.match)
  return match_ != NULL ? *match_
                         : *::proto3_proto::Match::internal_default_instance();
}
::proto3_proto::Match* S2C_TableSnapshot::mutable_match() {
  
  if (match_ == NULL) {
    match_ = new ::proto3_proto::Match;
  }
  // @@protoc_insertion_point(field_mutable:proto3_proto.S2C_TableSnapshot.match)
  return match_;
}
::proto3_proto::Match* S2C_TableSnapshot::release_match() {
  // @@protoc_insertion_point(field_release:proto3_proto.S2C_TableSnapshot.match)
  
  ::proto3_proto::Match* temp = match_;
  match_ = NULL;
  return temp;
}
void S2C_TableSnapshot::set_allocated_match(::proto3_proto::Match* match) {
  delete match_;
  match_ = match;
  if (match) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3_proto.S2C_TableSnapshot.match)
}

// .proto3_proto.PaiGowTable paigpow = 2;
bool S2C_TableSnapshot::has_paigpow() const {
  return this != internal_default_instance() && paigpow_ != NULL;
}
void S2C_TableSnapshot::clear_paigpow() {
  if (GetArenaNoVirtual() == NULL && paigpow_ != NULL) delete paigpow_;
  paigpow_ = NULL;
}
const ::proto3_proto::PaiGowTable& S2C_TableSnapshot::paigpow() const {
  // @@protoc_insertion_point(field_get:proto3_proto.S2C_TableSnapshot.paigpow)
  return paigpow_ != NULL ? *paigpow_
                         : *::proto3_proto::PaiGowTable::internal_default_instance();
}
::proto3_proto::PaiGowTable* S2C_TableSnapshot::mutable_paigpow() {
  
  if (paigpow_ == NULL) {
    paigpow_ = new ::proto3_proto::PaiGowTable;
  }
  // @@protoc_insertion_point(field_mutable:proto3_proto.S2C_TableSnapshot.paigpow)
  return paigpow_;
}
::proto3_proto::PaiGowTable* S2C_TableSnapshot::release_paigpow() {
  // @@protoc_insertion_point(field_release:proto3_proto.S2C_TableSnapshot.paigpow)
  
  ::proto3_proto::PaiGowTable* temp = paigpow_;
  paigpow_ = NULL;
  return temp;
}
void S2C_TableSnapshot::set_allocated_paigpow(::proto3_proto::PaiGowTable* paigpow) {
  delete paigpow_;
  paigpow_ = paigpow;
  if (paigpow) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto3_proto.S2C_TableSnapshot.paigpow)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto3_proto

// @@protoc_insertion_point(global_scope)
